expr_lst : separated_list(',', expr) { $0 };

Ident : <Ident> { *$0 };


atom : <QuotedStr>          { Terminal(LITERAL, unesc(*$0)) }
     | '<' Ident '>'        { Terminal(SYMBOL, $1) }
     | Ident                { NonTerminal($0) }
     | '(' expr ')'            { $1 }
     | Ident '[' expr_lst ']'  { MacroUse($0, $2) }
     | Ident '=' atomExpr      { Bind($0, $2) }
     ;


atomExpr : atom               { $0 }
         | atom '?'           { Optional($0) }
         ;
seq : list(atomExpr) { $0 };
cseq : seq { seq($0) };
expr : separated_list('|', cseq) { alt($0) };


rewrite : seq               { Rewrite(seq($0), None) }
        | seq '{' lang_stmts '}'  { Rewrite(seq($0), $2) }
        ;

alts : separated_list('|', rewrite) { $0 };

IdentList : separated_list(',', Ident) { $0 };

prod : Ident ':' alts ';'                       { Def($0, Define, $2) }
     | Ident '[' IdentList ']' ':' alts ';'     { MacroDef($0, $2, Define, $5)}
     | Ident '[' ']' ':' alts ';'               { MacroDef($0, [], Define, $4)}
     
     | Ident '<=>' expr ';'                       { Def($0, Alias, $2) }
     | Ident '[' IdentList ']' '<=>' expr ';'     { MacroDef($0, $2, Alias, $5)}
     | Ident '[' ']' '<=>' expr ';'               { MacroDef($0, [], Alias, $4)}
     ;

lang_stmts : separated_list(';', lang) { maybeStmts($0) };

lang_lst : separated_list(',', lang) { $0 };

lang : lang_atom                     { $0 }
     | lang '(' lang_lst ')'         { Call($0, $2) }
     | lang '(' ')'                  { Call($0, []) }
     ;

lang_atom :
       Ident                 { Var($0) }
     | <Int>                 { Int(int(*$0)) }
     | '(' ')'               { Tuple([]) }
     | '[' ']'               { List([]) }
     | '(' lang_lst ')'      { maybeTuple($1) }
     | '(' lang_lst ',' ')'  { Tuple($1) }
     | '[' lang_lst ']'      { List($1) }
     | '$' <Int>             { Slot(int(*$1)) }
     | lang_atom '.' Ident   { Attr($0, $2) }
     ;

filename : <QuotedStr> { unesc(*$0) }
         ;

pragma : '%include' Ident separated_list(",", filename) { Include($1, $2) }
       | '%include' separated_list(",", filename) { Include(None, $1) }
       | '%parametric' separated_list(',', Ident) { Params($1) }
       | <Code> { Include(None, [(*$0, )]) }
       | <Ident> <Code> { Include(*$0, [(*$1, )]) }
       ;

START : <BOF> list(prod|pragma) <EOF> { $1 }
      ;
