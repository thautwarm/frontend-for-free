# this file is auto-generated by RBNF.hs and the Python package rbnf-rts

from rbnf_rts.rbnf_linker import link
from rbnf_rts.utils import ImmutableMap
from rbnf_rts.lexical import *
__all__ = ['lexicals', 'run_lexer', 'mk_parser']
(lexicals, run_lexer) = lexer(r(WS='\\s+'), r(QuotedStr='"([^\\\\"]+|\\\\.)*?"|\'([^\\\\\']+|\\\\.)*?\''), r(Int='\\d+'), r(Ident='[a-zA-Z_\\u4e00-\\u9fa5][a-zA-Z0-9_\\u4e00-\\u9fa5]*'), r(comment='\\#[\\w|\\W]*?\\n'), r(Code='%%inline[\\w|\\W]*?%%'), l['}'], l['|'], l['{'], l[']'], l['['], l['?'], l['>'], l['='], l['<=>'], l['<'], l[';'], l[':='], l[','], l[')'], l['('], l['%include'], l['$'], ignores=['WS', 'comment'], reserved_map=ImmutableMap.from_dict({',': 'quote ,', '<': 'quote <', '>': 'quote >', '(': 'quote (', ')': 'quote )', '[': 'quote [', ']': 'quote ]', '=': 'quote =', '?': 'quote ?', '|': 'quote |', '{': 'quote {', '}': 'quote }', ':=': 'quote :=', ';': 'quote ;', '<=>': 'quote <=>', '$': 'quote $', '%include': 'quote %include'}), numbering={'BOF': 0, 'EOF': 1, 'quote ,': 2, 'quote <': 3, 'quote >': 4, 'quote (': 5, 'quote )': 6, 'quote [': 7, 'quote ]': 8, 'quote =': 9, 'quote ?': 10, 'quote |': 11, 'quote {': 12, 'quote }': 13, 'quote :=': 14, 'quote ;': 15, 'quote <=>': 16, 'quote $': 17, 'quote %include': 18, 'WS': 19, 'QuotedStr': 20, 'Int': 21, 'Ident': 22, 'comment': 23, 'Code': 24})



def mk_parser(Include, Terminal, LITERAL, SYMBOL, NonTerminal, Optional, MacroUse, Bind, Rewrite, Define, Alias, Def, MacroDef, Var, Int, List, maybeTuple, Tuple, Slot, Call, seq, alt, unesc):
    from rbnf_rts.rts import AST as prim__mk__ast, Cons as prim__cons, _nil as prim__nil

    def lr_step_lang(_slot_0, prim__state, prim__tokens):
        lcl_0 = 5
        try:
            _py_local_tk = prim__tokens.array[prim__tokens.offset]
            if (_py_local_tk.idint is lcl_0):
                prim__tokens.offset += 1
            else:
                _py_local_tk = None
        except IndexError:
            _py_local_tk = None
        lcl_0 = _py_local_tk
        _slot_1 = lcl_0
        lcl_0 = (_slot_1 is None)
        if lcl_0:
            lcl_1 = prim__tokens.offset
            lcl_1 = (lcl_1, 'quote ( not match')
            lcl_1 = prim__cons(lcl_1, prim__nil)
            lcl_1 = lcl_1
            lcl_1 = (False, lcl_1)
            lcl_0 = lcl_1
        else:
            lcl_1 = prim__tokens.offset
            _off_1 = lcl_1
            lcl_1 = (len(prim__tokens.array) > (prim__tokens.offset + 0))
            if lcl_1:
                lcl_3 = prim__tokens.array[(prim__tokens.offset + 0)]
                lcl_3 = lcl_3.idint
                if (lcl_3 == 7):
                    lcl_4 = parse_lang__lst(prim__state, prim__tokens)
                    _slot_2_check = lcl_4
                    lcl_4 = _slot_2_check[0]
                    lcl_4 = (lcl_4 is False)
                    if lcl_4:
                        lcl_4 = _slot_2_check
                    else:
                        lcl_5 = _slot_2_check[1]
                        lcl_5 = lcl_5
                        _slot_2 = lcl_5
                        lcl_5 = 6
                        try:
                            _py_local_tk = prim__tokens.array[prim__tokens.offset]
                            if (_py_local_tk.idint is lcl_5):
                                prim__tokens.offset += 1
                            else:
                                _py_local_tk = None
                        except IndexError:
                            _py_local_tk = None
                        lcl_5 = _py_local_tk
                        _slot_3 = lcl_5
                        lcl_5 = (_slot_3 is None)
                        if lcl_5:
                            lcl_6 = prim__tokens.offset
                            lcl_6 = (lcl_6, 'quote ) not match')
                            lcl_6 = prim__cons(lcl_6, prim__nil)
                            lcl_6 = lcl_6
                            lcl_6 = (False, lcl_6)
                            lcl_5 = lcl_6
                        else:
                            lcl_6 = _slot_0
                            lcl_7 = _slot_2
                            lcl_6 = Call(lcl_6, lcl_7)
                            _slot_local__1 = lcl_6
                            lcl_6 = (True, _slot_local__1)
                            lcl_5 = lcl_6
                        lcl_4 = lcl_5
                    lcl_2 = lcl_4
                elif (lcl_3 == 6):
                    _py_local_i = prim__tokens.offset
                    _py_local_t = prim__tokens.array[_py_local_i]
                    prim__tokens.offset = (_py_local_i + 1)
                    lcl_4 = _py_local_t
                    _slot_2 = lcl_4
                    lcl_4 = _slot_0
                    lcl_5 = []
                    lcl_4 = Call(lcl_4, lcl_5)
                    _slot_local__1 = lcl_4
                    lcl_4 = (True, _slot_local__1)
                    lcl_2 = lcl_4
                elif (lcl_3 == 5):
                    lcl_4 = parse_lang__lst(prim__state, prim__tokens)
                    _slot_2_check = lcl_4
                    lcl_4 = _slot_2_check[0]
                    lcl_4 = (lcl_4 is False)
                    if lcl_4:
                        lcl_4 = _slot_2_check
                    else:
                        lcl_5 = _slot_2_check[1]
                        lcl_5 = lcl_5
                        _slot_2 = lcl_5
                        lcl_5 = 6
                        try:
                            _py_local_tk = prim__tokens.array[prim__tokens.offset]
                            if (_py_local_tk.idint is lcl_5):
                                prim__tokens.offset += 1
                            else:
                                _py_local_tk = None
                        except IndexError:
                            _py_local_tk = None
                        lcl_5 = _py_local_tk
                        _slot_3 = lcl_5
                        lcl_5 = (_slot_3 is None)
                        if lcl_5:
                            lcl_6 = prim__tokens.offset
                            lcl_6 = (lcl_6, 'quote ) not match')
                            lcl_6 = prim__cons(lcl_6, prim__nil)
                            lcl_6 = lcl_6
                            lcl_6 = (False, lcl_6)
                            lcl_5 = lcl_6
                        else:
                            lcl_6 = _slot_0
                            lcl_7 = _slot_2
                            lcl_6 = Call(lcl_6, lcl_7)
                            _slot_local__1 = lcl_6
                            lcl_6 = (True, _slot_local__1)
                            lcl_5 = lcl_6
                        lcl_4 = lcl_5
                    lcl_2 = lcl_4
                elif (lcl_3 == 17):
                    lcl_4 = parse_lang__lst(prim__state, prim__tokens)
                    _slot_2_check = lcl_4
                    lcl_4 = _slot_2_check[0]
                    lcl_4 = (lcl_4 is False)
                    if lcl_4:
                        lcl_4 = _slot_2_check
                    else:
                        lcl_5 = _slot_2_check[1]
                        lcl_5 = lcl_5
                        _slot_2 = lcl_5
                        lcl_5 = 6
                        try:
                            _py_local_tk = prim__tokens.array[prim__tokens.offset]
                            if (_py_local_tk.idint is lcl_5):
                                prim__tokens.offset += 1
                            else:
                                _py_local_tk = None
                        except IndexError:
                            _py_local_tk = None
                        lcl_5 = _py_local_tk
                        _slot_3 = lcl_5
                        lcl_5 = (_slot_3 is None)
                        if lcl_5:
                            lcl_6 = prim__tokens.offset
                            lcl_6 = (lcl_6, 'quote ) not match')
                            lcl_6 = prim__cons(lcl_6, prim__nil)
                            lcl_6 = lcl_6
                            lcl_6 = (False, lcl_6)
                            lcl_5 = lcl_6
                        else:
                            lcl_6 = _slot_0
                            lcl_7 = _slot_2
                            lcl_6 = Call(lcl_6, lcl_7)
                            _slot_local__1 = lcl_6
                            lcl_6 = (True, _slot_local__1)
                            lcl_5 = lcl_6
                        lcl_4 = lcl_5
                    lcl_2 = lcl_4
                elif (lcl_3 == 21):
                    lcl_4 = parse_lang__lst(prim__state, prim__tokens)
                    _slot_2_check = lcl_4
                    lcl_4 = _slot_2_check[0]
                    lcl_4 = (lcl_4 is False)
                    if lcl_4:
                        lcl_4 = _slot_2_check
                    else:
                        lcl_5 = _slot_2_check[1]
                        lcl_5 = lcl_5
                        _slot_2 = lcl_5
                        lcl_5 = 6
                        try:
                            _py_local_tk = prim__tokens.array[prim__tokens.offset]
                            if (_py_local_tk.idint is lcl_5):
                                prim__tokens.offset += 1
                            else:
                                _py_local_tk = None
                        except IndexError:
                            _py_local_tk = None
                        lcl_5 = _py_local_tk
                        _slot_3 = lcl_5
                        lcl_5 = (_slot_3 is None)
                        if lcl_5:
                            lcl_6 = prim__tokens.offset
                            lcl_6 = (lcl_6, 'quote ) not match')
                            lcl_6 = prim__cons(lcl_6, prim__nil)
                            lcl_6 = lcl_6
                            lcl_6 = (False, lcl_6)
                            lcl_5 = lcl_6
                        else:
                            lcl_6 = _slot_0
                            lcl_7 = _slot_2
                            lcl_6 = Call(lcl_6, lcl_7)
                            _slot_local__1 = lcl_6
                            lcl_6 = (True, _slot_local__1)
                            lcl_5 = lcl_6
                        lcl_4 = lcl_5
                    lcl_2 = lcl_4
                elif (lcl_3 == 22):
                    lcl_4 = parse_lang__lst(prim__state, prim__tokens)
                    _slot_2_check = lcl_4
                    lcl_4 = _slot_2_check[0]
                    lcl_4 = (lcl_4 is False)
                    if lcl_4:
                        lcl_4 = _slot_2_check
                    else:
                        lcl_5 = _slot_2_check[1]
                        lcl_5 = lcl_5
                        _slot_2 = lcl_5
                        lcl_5 = 6
                        try:
                            _py_local_tk = prim__tokens.array[prim__tokens.offset]
                            if (_py_local_tk.idint is lcl_5):
                                prim__tokens.offset += 1
                            else:
                                _py_local_tk = None
                        except IndexError:
                            _py_local_tk = None
                        lcl_5 = _py_local_tk
                        _slot_3 = lcl_5
                        lcl_5 = (_slot_3 is None)
                        if lcl_5:
                            lcl_6 = prim__tokens.offset
                            lcl_6 = (lcl_6, 'quote ) not match')
                            lcl_6 = prim__cons(lcl_6, prim__nil)
                            lcl_6 = lcl_6
                            lcl_6 = (False, lcl_6)
                            lcl_5 = lcl_6
                        else:
                            lcl_6 = _slot_0
                            lcl_7 = _slot_2
                            lcl_6 = Call(lcl_6, lcl_7)
                            _slot_local__1 = lcl_6
                            lcl_6 = (True, _slot_local__1)
                            lcl_5 = lcl_6
                        lcl_4 = lcl_5
                    lcl_2 = lcl_4
                else:
                    lcl_4 = (_off_1, 'lang lookahead failed')
                    lcl_4 = prim__cons(lcl_4, prim__nil)
                    lcl_4 = lcl_4
                    lcl_4 = (False, lcl_4)
                    lcl_2 = lcl_4
                lcl_1 = lcl_2
            else:
                lcl_2 = (_off_1, 'lang got EOF')
                lcl_2 = prim__cons(lcl_2, prim__nil)
                lcl_2 = lcl_2
                lcl_2 = (False, lcl_2)
                lcl_1 = lcl_2
            lcl_0 = lcl_1
        return lcl_0

    def lr_loop_lang(_slot_0, prim__state, prim__tokens):
        lr_lang_reduce = _slot_0
        lcl_0 = prim__tokens.offset
        _off_0 = lcl_0
        lcl_0 = lr_step_lang(lr_lang_reduce, prim__state, prim__tokens)
        lr_lang_try = lcl_0
        lcl_0 = lr_lang_try[0]
        lcl_0 = (lcl_0 is not False)
        while lcl_0:
            lcl_1 = prim__tokens.offset
            _off_0 = lcl_1
            lcl_1 = lr_lang_try[1]
            lcl_1 = lcl_1
            lr_lang_reduce = lcl_1
            lcl_1 = lr_step_lang(lr_lang_reduce, prim__state, prim__tokens)
            lr_lang_try = lcl_1
            lcl_1 = lr_lang_try[0]
            lcl_1 = (lcl_1 is not False)
            lcl_0 = lcl_1
        lcl_0 = prim__tokens.offset
        lcl_0 = (lcl_0 is _off_0)
        if lcl_0:
            lcl_1 = (True, lr_lang_reduce)
            lcl_0 = lcl_1
        else:
            lcl_0 = lr_lang_try
        return lcl_0

    def lr_step_rbnf__list__1(_slot_0, prim__state, prim__tokens):
        lcl_0 = parse_atomExpr(prim__state, prim__tokens)
        _slot_1_check = lcl_0
        lcl_0 = _slot_1_check[0]
        lcl_0 = (lcl_0 is False)
        if lcl_0:
            lcl_0 = _slot_1_check
        else:
            lcl_1 = _slot_1_check[1]
            lcl_1 = lcl_1
            _slot_1 = lcl_1
            lcl_1 = _slot_0
            lcl_2 = _slot_1
            _py_local_t = lcl_1
            _py_local_t.append(lcl_2)
            lcl_1 = _py_local_t
            _slot_local__1 = lcl_1
            lcl_1 = (True, _slot_local__1)
            lcl_0 = lcl_1
        return lcl_0

    def lr_loop_rbnf__list__1(_slot_0, prim__state, prim__tokens):
        lr_rbnf__list__1_reduce = _slot_0
        lcl_0 = prim__tokens.offset
        _off_0 = lcl_0
        lcl_0 = lr_step_rbnf__list__1(lr_rbnf__list__1_reduce, prim__state, prim__tokens)
        lr_rbnf__list__1_try = lcl_0
        lcl_0 = lr_rbnf__list__1_try[0]
        lcl_0 = (lcl_0 is not False)
        while lcl_0:
            lcl_1 = prim__tokens.offset
            _off_0 = lcl_1
            lcl_1 = lr_rbnf__list__1_try[1]
            lcl_1 = lcl_1
            lr_rbnf__list__1_reduce = lcl_1
            lcl_1 = lr_step_rbnf__list__1(lr_rbnf__list__1_reduce, prim__state, prim__tokens)
            lr_rbnf__list__1_try = lcl_1
            lcl_1 = lr_rbnf__list__1_try[0]
            lcl_1 = (lcl_1 is not False)
            lcl_0 = lcl_1
        lcl_0 = prim__tokens.offset
        lcl_0 = (lcl_0 is _off_0)
        if lcl_0:
            lcl_1 = (True, lr_rbnf__list__1_reduce)
            lcl_0 = lcl_1
        else:
            lcl_0 = lr_rbnf__list__1_try
        return lcl_0

    def lr_step_rbnf__list__7(_slot_0, prim__state, prim__tokens):
        lcl_0 = prim__tokens.offset
        _off_0 = lcl_0
        lcl_0 = (len(prim__tokens.array) > (prim__tokens.offset + 0))
        if lcl_0:
            lcl_2 = prim__tokens.array[(prim__tokens.offset + 0)]
            lcl_2 = lcl_2.idint
            if (lcl_2 == 18):
                lcl_3 = parse_pragma(prim__state, prim__tokens)
                _slot_1_check = lcl_3
                lcl_3 = _slot_1_check[0]
                lcl_3 = (lcl_3 is False)
                if lcl_3:
                    lcl_3 = _slot_1_check
                else:
                    lcl_4 = _slot_1_check[1]
                    lcl_4 = lcl_4
                    _slot_1 = lcl_4
                    lcl_4 = _slot_0
                    lcl_5 = _slot_1
                    _py_local_t = lcl_4
                    _py_local_t.append(lcl_5)
                    lcl_4 = _py_local_t
                    _slot_local__1 = lcl_4
                    lcl_4 = (True, _slot_local__1)
                    lcl_3 = lcl_4
                lcl_1 = lcl_3
            elif (lcl_2 == 22):
                lcl_3 = prim__tokens.offset
                _off_1 = lcl_3
                lcl_3 = (len(prim__tokens.array) > (prim__tokens.offset + 1))
                if lcl_3:
                    lcl_5 = prim__tokens.array[(prim__tokens.offset + 1)]
                    lcl_5 = lcl_5.idint
                    if (lcl_5 == 7):
                        lcl_6 = parse_prod(prim__state, prim__tokens)
                        _slot_1_check = lcl_6
                        lcl_6 = _slot_1_check[0]
                        lcl_6 = (lcl_6 is False)
                        if lcl_6:
                            lcl_6 = _slot_1_check
                        else:
                            lcl_7 = _slot_1_check[1]
                            lcl_7 = lcl_7
                            _slot_1 = lcl_7
                            lcl_7 = _slot_0
                            lcl_8 = _slot_1
                            _py_local_t = lcl_7
                            _py_local_t.append(lcl_8)
                            lcl_7 = _py_local_t
                            _slot_local__1 = lcl_7
                            lcl_7 = (True, _slot_local__1)
                            lcl_6 = lcl_7
                        lcl_4 = lcl_6
                    elif (lcl_5 == 16):
                        lcl_6 = parse_prod(prim__state, prim__tokens)
                        _slot_1_check = lcl_6
                        lcl_6 = _slot_1_check[0]
                        lcl_6 = (lcl_6 is False)
                        if lcl_6:
                            lcl_6 = _slot_1_check
                        else:
                            lcl_7 = _slot_1_check[1]
                            lcl_7 = lcl_7
                            _slot_1 = lcl_7
                            lcl_7 = _slot_0
                            lcl_8 = _slot_1
                            _py_local_t = lcl_7
                            _py_local_t.append(lcl_8)
                            lcl_7 = _py_local_t
                            _slot_local__1 = lcl_7
                            lcl_7 = (True, _slot_local__1)
                            lcl_6 = lcl_7
                        lcl_4 = lcl_6
                    elif (lcl_5 == 14):
                        lcl_6 = parse_prod(prim__state, prim__tokens)
                        _slot_1_check = lcl_6
                        lcl_6 = _slot_1_check[0]
                        lcl_6 = (lcl_6 is False)
                        if lcl_6:
                            lcl_6 = _slot_1_check
                        else:
                            lcl_7 = _slot_1_check[1]
                            lcl_7 = lcl_7
                            _slot_1 = lcl_7
                            lcl_7 = _slot_0
                            lcl_8 = _slot_1
                            _py_local_t = lcl_7
                            _py_local_t.append(lcl_8)
                            lcl_7 = _py_local_t
                            _slot_local__1 = lcl_7
                            lcl_7 = (True, _slot_local__1)
                            lcl_6 = lcl_7
                        lcl_4 = lcl_6
                    elif (lcl_5 == 24):
                        lcl_6 = parse_pragma(prim__state, prim__tokens)
                        _slot_1_check = lcl_6
                        lcl_6 = _slot_1_check[0]
                        lcl_6 = (lcl_6 is False)
                        if lcl_6:
                            lcl_6 = _slot_1_check
                        else:
                            lcl_7 = _slot_1_check[1]
                            lcl_7 = lcl_7
                            _slot_1 = lcl_7
                            lcl_7 = _slot_0
                            lcl_8 = _slot_1
                            _py_local_t = lcl_7
                            _py_local_t.append(lcl_8)
                            lcl_7 = _py_local_t
                            _slot_local__1 = lcl_7
                            lcl_7 = (True, _slot_local__1)
                            lcl_6 = lcl_7
                        lcl_4 = lcl_6
                    else:
                        lcl_6 = parse_prod(prim__state, prim__tokens)
                        _slot_1_check = lcl_6
                        lcl_6 = _slot_1_check[0]
                        lcl_6 = (lcl_6 is False)
                        if lcl_6:
                            lcl_6 = _slot_1_check
                        else:
                            lcl_7 = _slot_1_check[1]
                            lcl_7 = lcl_7
                            _slot_1 = lcl_7
                            lcl_7 = _slot_0
                            lcl_8 = _slot_1
                            _py_local_t = lcl_7
                            _py_local_t.append(lcl_8)
                            lcl_7 = _py_local_t
                            _slot_local__1 = lcl_7
                            lcl_7 = (True, _slot_local__1)
                            lcl_6 = lcl_7
                        lcl_4 = lcl_6
                    lcl_3 = lcl_4
                else:
                    lcl_4 = (_off_1, 'rbnf_list_7 got EOF')
                    lcl_4 = prim__cons(lcl_4, prim__nil)
                    lcl_4 = lcl_4
                    lcl_4 = (False, lcl_4)
                    lcl_3 = lcl_4
                lcl_1 = lcl_3
            elif (lcl_2 == 24):
                lcl_3 = parse_pragma(prim__state, prim__tokens)
                _slot_1_check = lcl_3
                lcl_3 = _slot_1_check[0]
                lcl_3 = (lcl_3 is False)
                if lcl_3:
                    lcl_3 = _slot_1_check
                else:
                    lcl_4 = _slot_1_check[1]
                    lcl_4 = lcl_4
                    _slot_1 = lcl_4
                    lcl_4 = _slot_0
                    lcl_5 = _slot_1
                    _py_local_t = lcl_4
                    _py_local_t.append(lcl_5)
                    lcl_4 = _py_local_t
                    _slot_local__1 = lcl_4
                    lcl_4 = (True, _slot_local__1)
                    lcl_3 = lcl_4
                lcl_1 = lcl_3
            else:
                lcl_3 = (_off_0, 'rbnf_list_7 lookahead failed')
                lcl_3 = prim__cons(lcl_3, prim__nil)
                lcl_3 = lcl_3
                lcl_3 = (False, lcl_3)
                lcl_1 = lcl_3
            lcl_0 = lcl_1
        else:
            lcl_1 = (_off_0, 'rbnf_list_7 got EOF')
            lcl_1 = prim__cons(lcl_1, prim__nil)
            lcl_1 = lcl_1
            lcl_1 = (False, lcl_1)
            lcl_0 = lcl_1
        return lcl_0

    def lr_loop_rbnf__list__7(_slot_0, prim__state, prim__tokens):
        lr_rbnf__list__7_reduce = _slot_0
        lcl_0 = prim__tokens.offset
        _off_0 = lcl_0
        lcl_0 = lr_step_rbnf__list__7(lr_rbnf__list__7_reduce, prim__state, prim__tokens)
        lr_rbnf__list__7_try = lcl_0
        lcl_0 = lr_rbnf__list__7_try[0]
        lcl_0 = (lcl_0 is not False)
        while lcl_0:
            lcl_1 = prim__tokens.offset
            _off_0 = lcl_1
            lcl_1 = lr_rbnf__list__7_try[1]
            lcl_1 = lcl_1
            lr_rbnf__list__7_reduce = lcl_1
            lcl_1 = lr_step_rbnf__list__7(lr_rbnf__list__7_reduce, prim__state, prim__tokens)
            lr_rbnf__list__7_try = lcl_1
            lcl_1 = lr_rbnf__list__7_try[0]
            lcl_1 = (lcl_1 is not False)
            lcl_0 = lcl_1
        lcl_0 = prim__tokens.offset
        lcl_0 = (lcl_0 is _off_0)
        if lcl_0:
            lcl_1 = (True, lr_rbnf__list__7_reduce)
            lcl_0 = lcl_1
        else:
            lcl_0 = lr_rbnf__list__7_try
        return lcl_0

    def lr_step_rbnf__sep__list__0(_slot_0, prim__state, prim__tokens):
        lcl_0 = 2
        try:
            _py_local_tk = prim__tokens.array[prim__tokens.offset]
            if (_py_local_tk.idint is lcl_0):
                prim__tokens.offset += 1
            else:
                _py_local_tk = None
        except IndexError:
            _py_local_tk = None
        lcl_0 = _py_local_tk
        _slot_1 = lcl_0
        lcl_0 = (_slot_1 is None)
        if lcl_0:
            lcl_1 = prim__tokens.offset
            lcl_1 = (lcl_1, 'quote , not match')
            lcl_1 = prim__cons(lcl_1, prim__nil)
            lcl_1 = lcl_1
            lcl_1 = (False, lcl_1)
            lcl_0 = lcl_1
        else:
            lcl_1 = parse_expr(prim__state, prim__tokens)
            _slot_2_check = lcl_1
            lcl_1 = _slot_2_check[0]
            lcl_1 = (lcl_1 is False)
            if lcl_1:
                lcl_1 = _slot_2_check
            else:
                lcl_2 = _slot_2_check[1]
                lcl_2 = lcl_2
                _slot_2 = lcl_2
                lcl_2 = _slot_0
                lcl_3 = _slot_2
                _py_local_t = lcl_2
                _py_local_t.append(lcl_3)
                lcl_2 = _py_local_t
                _slot_local__1 = lcl_2
                lcl_2 = (True, _slot_local__1)
                lcl_1 = lcl_2
            lcl_0 = lcl_1
        return lcl_0

    def lr_loop_rbnf__sep__list__0(_slot_0, prim__state, prim__tokens):
        lr_rbnf__sep__list__0_reduce = _slot_0
        lcl_0 = prim__tokens.offset
        _off_0 = lcl_0
        lcl_0 = lr_step_rbnf__sep__list__0(lr_rbnf__sep__list__0_reduce, prim__state, prim__tokens)
        lr_rbnf__sep__list__0_try = lcl_0
        lcl_0 = lr_rbnf__sep__list__0_try[0]
        lcl_0 = (lcl_0 is not False)
        while lcl_0:
            lcl_1 = prim__tokens.offset
            _off_0 = lcl_1
            lcl_1 = lr_rbnf__sep__list__0_try[1]
            lcl_1 = lcl_1
            lr_rbnf__sep__list__0_reduce = lcl_1
            lcl_1 = lr_step_rbnf__sep__list__0(lr_rbnf__sep__list__0_reduce, prim__state, prim__tokens)
            lr_rbnf__sep__list__0_try = lcl_1
            lcl_1 = lr_rbnf__sep__list__0_try[0]
            lcl_1 = (lcl_1 is not False)
            lcl_0 = lcl_1
        lcl_0 = prim__tokens.offset
        lcl_0 = (lcl_0 is _off_0)
        if lcl_0:
            lcl_1 = (True, lr_rbnf__sep__list__0_reduce)
            lcl_0 = lcl_1
        else:
            lcl_0 = lr_rbnf__sep__list__0_try
        return lcl_0

    def lr_step_rbnf__sep__list__2(_slot_0, prim__state, prim__tokens):
        lcl_0 = 11
        try:
            _py_local_tk = prim__tokens.array[prim__tokens.offset]
            if (_py_local_tk.idint is lcl_0):
                prim__tokens.offset += 1
            else:
                _py_local_tk = None
        except IndexError:
            _py_local_tk = None
        lcl_0 = _py_local_tk
        _slot_1 = lcl_0
        lcl_0 = (_slot_1 is None)
        if lcl_0:
            lcl_1 = prim__tokens.offset
            lcl_1 = (lcl_1, 'quote | not match')
            lcl_1 = prim__cons(lcl_1, prim__nil)
            lcl_1 = lcl_1
            lcl_1 = (False, lcl_1)
            lcl_0 = lcl_1
        else:
            lcl_1 = parse_cseq(prim__state, prim__tokens)
            _slot_2_check = lcl_1
            lcl_1 = _slot_2_check[0]
            lcl_1 = (lcl_1 is False)
            if lcl_1:
                lcl_1 = _slot_2_check
            else:
                lcl_2 = _slot_2_check[1]
                lcl_2 = lcl_2
                _slot_2 = lcl_2
                lcl_2 = _slot_0
                lcl_3 = _slot_2
                _py_local_t = lcl_2
                _py_local_t.append(lcl_3)
                lcl_2 = _py_local_t
                _slot_local__1 = lcl_2
                lcl_2 = (True, _slot_local__1)
                lcl_1 = lcl_2
            lcl_0 = lcl_1
        return lcl_0

    def lr_loop_rbnf__sep__list__2(_slot_0, prim__state, prim__tokens):
        lr_rbnf__sep__list__2_reduce = _slot_0
        lcl_0 = prim__tokens.offset
        _off_0 = lcl_0
        lcl_0 = lr_step_rbnf__sep__list__2(lr_rbnf__sep__list__2_reduce, prim__state, prim__tokens)
        lr_rbnf__sep__list__2_try = lcl_0
        lcl_0 = lr_rbnf__sep__list__2_try[0]
        lcl_0 = (lcl_0 is not False)
        while lcl_0:
            lcl_1 = prim__tokens.offset
            _off_0 = lcl_1
            lcl_1 = lr_rbnf__sep__list__2_try[1]
            lcl_1 = lcl_1
            lr_rbnf__sep__list__2_reduce = lcl_1
            lcl_1 = lr_step_rbnf__sep__list__2(lr_rbnf__sep__list__2_reduce, prim__state, prim__tokens)
            lr_rbnf__sep__list__2_try = lcl_1
            lcl_1 = lr_rbnf__sep__list__2_try[0]
            lcl_1 = (lcl_1 is not False)
            lcl_0 = lcl_1
        lcl_0 = prim__tokens.offset
        lcl_0 = (lcl_0 is _off_0)
        if lcl_0:
            lcl_1 = (True, lr_rbnf__sep__list__2_reduce)
            lcl_0 = lcl_1
        else:
            lcl_0 = lr_rbnf__sep__list__2_try
        return lcl_0

    def lr_step_rbnf__sep__list__3(_slot_0, prim__state, prim__tokens):
        lcl_0 = 11
        try:
            _py_local_tk = prim__tokens.array[prim__tokens.offset]
            if (_py_local_tk.idint is lcl_0):
                prim__tokens.offset += 1
            else:
                _py_local_tk = None
        except IndexError:
            _py_local_tk = None
        lcl_0 = _py_local_tk
        _slot_1 = lcl_0
        lcl_0 = (_slot_1 is None)
        if lcl_0:
            lcl_1 = prim__tokens.offset
            lcl_1 = (lcl_1, 'quote | not match')
            lcl_1 = prim__cons(lcl_1, prim__nil)
            lcl_1 = lcl_1
            lcl_1 = (False, lcl_1)
            lcl_0 = lcl_1
        else:
            lcl_1 = parse_rewrite(prim__state, prim__tokens)
            _slot_2_check = lcl_1
            lcl_1 = _slot_2_check[0]
            lcl_1 = (lcl_1 is False)
            if lcl_1:
                lcl_1 = _slot_2_check
            else:
                lcl_2 = _slot_2_check[1]
                lcl_2 = lcl_2
                _slot_2 = lcl_2
                lcl_2 = _slot_0
                lcl_3 = _slot_2
                _py_local_t = lcl_2
                _py_local_t.append(lcl_3)
                lcl_2 = _py_local_t
                _slot_local__1 = lcl_2
                lcl_2 = (True, _slot_local__1)
                lcl_1 = lcl_2
            lcl_0 = lcl_1
        return lcl_0

    def lr_loop_rbnf__sep__list__3(_slot_0, prim__state, prim__tokens):
        lr_rbnf__sep__list__3_reduce = _slot_0
        lcl_0 = prim__tokens.offset
        _off_0 = lcl_0
        lcl_0 = lr_step_rbnf__sep__list__3(lr_rbnf__sep__list__3_reduce, prim__state, prim__tokens)
        lr_rbnf__sep__list__3_try = lcl_0
        lcl_0 = lr_rbnf__sep__list__3_try[0]
        lcl_0 = (lcl_0 is not False)
        while lcl_0:
            lcl_1 = prim__tokens.offset
            _off_0 = lcl_1
            lcl_1 = lr_rbnf__sep__list__3_try[1]
            lcl_1 = lcl_1
            lr_rbnf__sep__list__3_reduce = lcl_1
            lcl_1 = lr_step_rbnf__sep__list__3(lr_rbnf__sep__list__3_reduce, prim__state, prim__tokens)
            lr_rbnf__sep__list__3_try = lcl_1
            lcl_1 = lr_rbnf__sep__list__3_try[0]
            lcl_1 = (lcl_1 is not False)
            lcl_0 = lcl_1
        lcl_0 = prim__tokens.offset
        lcl_0 = (lcl_0 is _off_0)
        if lcl_0:
            lcl_1 = (True, lr_rbnf__sep__list__3_reduce)
            lcl_0 = lcl_1
        else:
            lcl_0 = lr_rbnf__sep__list__3_try
        return lcl_0

    def lr_step_rbnf__sep__list__4(_slot_0, prim__state, prim__tokens):
        lcl_0 = 2
        try:
            _py_local_tk = prim__tokens.array[prim__tokens.offset]
            if (_py_local_tk.idint is lcl_0):
                prim__tokens.offset += 1
            else:
                _py_local_tk = None
        except IndexError:
            _py_local_tk = None
        lcl_0 = _py_local_tk
        _slot_1 = lcl_0
        lcl_0 = (_slot_1 is None)
        if lcl_0:
            lcl_1 = prim__tokens.offset
            lcl_1 = (lcl_1, 'quote , not match')
            lcl_1 = prim__cons(lcl_1, prim__nil)
            lcl_1 = lcl_1
            lcl_1 = (False, lcl_1)
            lcl_0 = lcl_1
        else:
            lcl_1 = parse_Ident(prim__state, prim__tokens)
            _slot_2_check = lcl_1
            lcl_1 = _slot_2_check[0]
            lcl_1 = (lcl_1 is False)
            if lcl_1:
                lcl_1 = _slot_2_check
            else:
                lcl_2 = _slot_2_check[1]
                lcl_2 = lcl_2
                _slot_2 = lcl_2
                lcl_2 = _slot_0
                lcl_3 = _slot_2
                _py_local_t = lcl_2
                _py_local_t.append(lcl_3)
                lcl_2 = _py_local_t
                _slot_local__1 = lcl_2
                lcl_2 = (True, _slot_local__1)
                lcl_1 = lcl_2
            lcl_0 = lcl_1
        return lcl_0

    def lr_loop_rbnf__sep__list__4(_slot_0, prim__state, prim__tokens):
        lr_rbnf__sep__list__4_reduce = _slot_0
        lcl_0 = prim__tokens.offset
        _off_0 = lcl_0
        lcl_0 = lr_step_rbnf__sep__list__4(lr_rbnf__sep__list__4_reduce, prim__state, prim__tokens)
        lr_rbnf__sep__list__4_try = lcl_0
        lcl_0 = lr_rbnf__sep__list__4_try[0]
        lcl_0 = (lcl_0 is not False)
        while lcl_0:
            lcl_1 = prim__tokens.offset
            _off_0 = lcl_1
            lcl_1 = lr_rbnf__sep__list__4_try[1]
            lcl_1 = lcl_1
            lr_rbnf__sep__list__4_reduce = lcl_1
            lcl_1 = lr_step_rbnf__sep__list__4(lr_rbnf__sep__list__4_reduce, prim__state, prim__tokens)
            lr_rbnf__sep__list__4_try = lcl_1
            lcl_1 = lr_rbnf__sep__list__4_try[0]
            lcl_1 = (lcl_1 is not False)
            lcl_0 = lcl_1
        lcl_0 = prim__tokens.offset
        lcl_0 = (lcl_0 is _off_0)
        if lcl_0:
            lcl_1 = (True, lr_rbnf__sep__list__4_reduce)
            lcl_0 = lcl_1
        else:
            lcl_0 = lr_rbnf__sep__list__4_try
        return lcl_0

    def lr_step_rbnf__sep__list__5(_slot_0, prim__state, prim__tokens):
        lcl_0 = 2
        try:
            _py_local_tk = prim__tokens.array[prim__tokens.offset]
            if (_py_local_tk.idint is lcl_0):
                prim__tokens.offset += 1
            else:
                _py_local_tk = None
        except IndexError:
            _py_local_tk = None
        lcl_0 = _py_local_tk
        _slot_1 = lcl_0
        lcl_0 = (_slot_1 is None)
        if lcl_0:
            lcl_1 = prim__tokens.offset
            lcl_1 = (lcl_1, 'quote , not match')
            lcl_1 = prim__cons(lcl_1, prim__nil)
            lcl_1 = lcl_1
            lcl_1 = (False, lcl_1)
            lcl_0 = lcl_1
        else:
            lcl_1 = parse_lang(prim__state, prim__tokens)
            _slot_2_check = lcl_1
            lcl_1 = _slot_2_check[0]
            lcl_1 = (lcl_1 is False)
            if lcl_1:
                lcl_1 = _slot_2_check
            else:
                lcl_2 = _slot_2_check[1]
                lcl_2 = lcl_2
                _slot_2 = lcl_2
                lcl_2 = _slot_0
                lcl_3 = _slot_2
                _py_local_t = lcl_2
                _py_local_t.append(lcl_3)
                lcl_2 = _py_local_t
                _slot_local__1 = lcl_2
                lcl_2 = (True, _slot_local__1)
                lcl_1 = lcl_2
            lcl_0 = lcl_1
        return lcl_0

    def lr_loop_rbnf__sep__list__5(_slot_0, prim__state, prim__tokens):
        lr_rbnf__sep__list__5_reduce = _slot_0
        lcl_0 = prim__tokens.offset
        _off_0 = lcl_0
        lcl_0 = lr_step_rbnf__sep__list__5(lr_rbnf__sep__list__5_reduce, prim__state, prim__tokens)
        lr_rbnf__sep__list__5_try = lcl_0
        lcl_0 = lr_rbnf__sep__list__5_try[0]
        lcl_0 = (lcl_0 is not False)
        while lcl_0:
            lcl_1 = prim__tokens.offset
            _off_0 = lcl_1
            lcl_1 = lr_rbnf__sep__list__5_try[1]
            lcl_1 = lcl_1
            lr_rbnf__sep__list__5_reduce = lcl_1
            lcl_1 = lr_step_rbnf__sep__list__5(lr_rbnf__sep__list__5_reduce, prim__state, prim__tokens)
            lr_rbnf__sep__list__5_try = lcl_1
            lcl_1 = lr_rbnf__sep__list__5_try[0]
            lcl_1 = (lcl_1 is not False)
            lcl_0 = lcl_1
        lcl_0 = prim__tokens.offset
        lcl_0 = (lcl_0 is _off_0)
        if lcl_0:
            lcl_1 = (True, lr_rbnf__sep__list__5_reduce)
            lcl_0 = lcl_1
        else:
            lcl_0 = lr_rbnf__sep__list__5_try
        return lcl_0

    def lr_step_rbnf__sep__list__6(_slot_0, prim__state, prim__tokens):
        lcl_0 = 2
        try:
            _py_local_tk = prim__tokens.array[prim__tokens.offset]
            if (_py_local_tk.idint is lcl_0):
                prim__tokens.offset += 1
            else:
                _py_local_tk = None
        except IndexError:
            _py_local_tk = None
        lcl_0 = _py_local_tk
        _slot_1 = lcl_0
        lcl_0 = (_slot_1 is None)
        if lcl_0:
            lcl_1 = prim__tokens.offset
            lcl_1 = (lcl_1, 'quote , not match')
            lcl_1 = prim__cons(lcl_1, prim__nil)
            lcl_1 = lcl_1
            lcl_1 = (False, lcl_1)
            lcl_0 = lcl_1
        else:
            lcl_1 = parse_filename(prim__state, prim__tokens)
            _slot_2_check = lcl_1
            lcl_1 = _slot_2_check[0]
            lcl_1 = (lcl_1 is False)
            if lcl_1:
                lcl_1 = _slot_2_check
            else:
                lcl_2 = _slot_2_check[1]
                lcl_2 = lcl_2
                _slot_2 = lcl_2
                lcl_2 = _slot_0
                lcl_3 = _slot_2
                _py_local_t = lcl_2
                _py_local_t.append(lcl_3)
                lcl_2 = _py_local_t
                _slot_local__1 = lcl_2
                lcl_2 = (True, _slot_local__1)
                lcl_1 = lcl_2
            lcl_0 = lcl_1
        return lcl_0

    def lr_loop_rbnf__sep__list__6(_slot_0, prim__state, prim__tokens):
        lr_rbnf__sep__list__6_reduce = _slot_0
        lcl_0 = prim__tokens.offset
        _off_0 = lcl_0
        lcl_0 = lr_step_rbnf__sep__list__6(lr_rbnf__sep__list__6_reduce, prim__state, prim__tokens)
        lr_rbnf__sep__list__6_try = lcl_0
        lcl_0 = lr_rbnf__sep__list__6_try[0]
        lcl_0 = (lcl_0 is not False)
        while lcl_0:
            lcl_1 = prim__tokens.offset
            _off_0 = lcl_1
            lcl_1 = lr_rbnf__sep__list__6_try[1]
            lcl_1 = lcl_1
            lr_rbnf__sep__list__6_reduce = lcl_1
            lcl_1 = lr_step_rbnf__sep__list__6(lr_rbnf__sep__list__6_reduce, prim__state, prim__tokens)
            lr_rbnf__sep__list__6_try = lcl_1
            lcl_1 = lr_rbnf__sep__list__6_try[0]
            lcl_1 = (lcl_1 is not False)
            lcl_0 = lcl_1
        lcl_0 = prim__tokens.offset
        lcl_0 = (lcl_0 is _off_0)
        if lcl_0:
            lcl_1 = (True, lr_rbnf__sep__list__6_reduce)
            lcl_0 = lcl_1
        else:
            lcl_0 = lr_rbnf__sep__list__6_try
        return lcl_0

    def parse_Ident(prim__state, prim__tokens):
        lcl_0 = 22
        try:
            _py_local_tk = prim__tokens.array[prim__tokens.offset]
            if (_py_local_tk.idint is lcl_0):
                prim__tokens.offset += 1
            else:
                _py_local_tk = None
        except IndexError:
            _py_local_tk = None
        lcl_0 = _py_local_tk
        _slot_0 = lcl_0
        lcl_0 = (_slot_0 is None)
        if lcl_0:
            lcl_1 = prim__tokens.offset
            lcl_1 = (lcl_1, 'Ident not match')
            lcl_1 = prim__cons(lcl_1, prim__nil)
            lcl_1 = lcl_1
            lcl_1 = (False, lcl_1)
            lcl_0 = lcl_1
        else:
            lcl_1 = _slot_0
            lcl_1 = lcl_1.value
            _slot_local__1 = lcl_1
            lcl_1 = (True, _slot_local__1)
            lcl_0 = lcl_1
        return lcl_0

    def parse_IdentList(prim__state, prim__tokens):
        lcl_0 = parse_rbnf__sep__list__4(prim__state, prim__tokens)
        _slot_0_check = lcl_0
        lcl_0 = _slot_0_check[0]
        lcl_0 = (lcl_0 is False)
        if lcl_0:
            lcl_0 = _slot_0_check
        else:
            lcl_1 = _slot_0_check[1]
            lcl_1 = lcl_1
            _slot_0 = lcl_1
            lcl_1 = _slot_0
            _slot_local__1 = lcl_1
            lcl_1 = (True, _slot_local__1)
            lcl_0 = lcl_1
        return lcl_0

    def parse_START(prim__state, prim__tokens):
        lcl_0 = 0
        try:
            _py_local_tk = prim__tokens.array[prim__tokens.offset]
            if (_py_local_tk.idint is lcl_0):
                prim__tokens.offset += 1
            else:
                _py_local_tk = None
        except IndexError:
            _py_local_tk = None
        lcl_0 = _py_local_tk
        _slot_0 = lcl_0
        lcl_0 = (_slot_0 is None)
        if lcl_0:
            lcl_1 = prim__tokens.offset
            lcl_1 = (lcl_1, 'BOF not match')
            lcl_1 = prim__cons(lcl_1, prim__nil)
            lcl_1 = lcl_1
            lcl_1 = (False, lcl_1)
            lcl_0 = lcl_1
        else:
            lcl_1 = parse_rbnf__list__7(prim__state, prim__tokens)
            _slot_1_check = lcl_1
            lcl_1 = _slot_1_check[0]
            lcl_1 = (lcl_1 is False)
            if lcl_1:
                lcl_1 = _slot_1_check
            else:
                lcl_2 = _slot_1_check[1]
                lcl_2 = lcl_2
                _slot_1 = lcl_2
                lcl_2 = 1
                try:
                    _py_local_tk = prim__tokens.array[prim__tokens.offset]
                    if (_py_local_tk.idint is lcl_2):
                        prim__tokens.offset += 1
                    else:
                        _py_local_tk = None
                except IndexError:
                    _py_local_tk = None
                lcl_2 = _py_local_tk
                _slot_2 = lcl_2
                lcl_2 = (_slot_2 is None)
                if lcl_2:
                    lcl_3 = prim__tokens.offset
                    lcl_3 = (lcl_3, 'EOF not match')
                    lcl_3 = prim__cons(lcl_3, prim__nil)
                    lcl_3 = lcl_3
                    lcl_3 = (False, lcl_3)
                    lcl_2 = lcl_3
                else:
                    lcl_3 = _slot_1
                    _slot_local__1 = lcl_3
                    lcl_3 = (True, _slot_local__1)
                    lcl_2 = lcl_3
                lcl_1 = lcl_2
            lcl_0 = lcl_1
        return lcl_0

    def parse_alts(prim__state, prim__tokens):
        lcl_0 = parse_rbnf__sep__list__3(prim__state, prim__tokens)
        _slot_0_check = lcl_0
        lcl_0 = _slot_0_check[0]
        lcl_0 = (lcl_0 is False)
        if lcl_0:
            lcl_0 = _slot_0_check
        else:
            lcl_1 = _slot_0_check[1]
            lcl_1 = lcl_1
            _slot_0 = lcl_1
            lcl_1 = _slot_0
            _slot_local__1 = lcl_1
            lcl_1 = (True, _slot_local__1)
            lcl_0 = lcl_1
        return lcl_0

    def parse_atom(prim__state, prim__tokens):
        lcl_0 = prim__tokens.offset
        _off_0 = lcl_0
        lcl_0 = (len(prim__tokens.array) > (prim__tokens.offset + 0))
        if lcl_0:
            lcl_2 = prim__tokens.array[(prim__tokens.offset + 0)]
            lcl_2 = lcl_2.idint
            if (lcl_2 == 3):
                _py_local_i = prim__tokens.offset
                _py_local_t = prim__tokens.array[_py_local_i]
                prim__tokens.offset = (_py_local_i + 1)
                lcl_3 = _py_local_t
                _slot_0 = lcl_3
                lcl_3 = parse_Ident(prim__state, prim__tokens)
                _slot_1_check = lcl_3
                lcl_3 = _slot_1_check[0]
                lcl_3 = (lcl_3 is False)
                if lcl_3:
                    lcl_3 = _slot_1_check
                else:
                    lcl_4 = _slot_1_check[1]
                    lcl_4 = lcl_4
                    _slot_1 = lcl_4
                    lcl_4 = 4
                    try:
                        _py_local_tk = prim__tokens.array[prim__tokens.offset]
                        if (_py_local_tk.idint is lcl_4):
                            prim__tokens.offset += 1
                        else:
                            _py_local_tk = None
                    except IndexError:
                        _py_local_tk = None
                    lcl_4 = _py_local_tk
                    _slot_2 = lcl_4
                    lcl_4 = (_slot_2 is None)
                    if lcl_4:
                        lcl_5 = prim__tokens.offset
                        lcl_5 = (lcl_5, 'quote > not match')
                        lcl_5 = prim__cons(lcl_5, prim__nil)
                        lcl_5 = lcl_5
                        lcl_5 = (False, lcl_5)
                        lcl_4 = lcl_5
                    else:
                        lcl_5 = _slot_1
                        lcl_5 = Terminal(SYMBOL, lcl_5)
                        _slot_local__1 = lcl_5
                        lcl_5 = (True, _slot_local__1)
                        lcl_4 = lcl_5
                    lcl_3 = lcl_4
                lcl_1 = lcl_3
            elif (lcl_2 == 5):
                _py_local_i = prim__tokens.offset
                _py_local_t = prim__tokens.array[_py_local_i]
                prim__tokens.offset = (_py_local_i + 1)
                lcl_3 = _py_local_t
                _slot_0 = lcl_3
                lcl_3 = parse_expr(prim__state, prim__tokens)
                _slot_1_check = lcl_3
                lcl_3 = _slot_1_check[0]
                lcl_3 = (lcl_3 is False)
                if lcl_3:
                    lcl_3 = _slot_1_check
                else:
                    lcl_4 = _slot_1_check[1]
                    lcl_4 = lcl_4
                    _slot_1 = lcl_4
                    lcl_4 = 6
                    try:
                        _py_local_tk = prim__tokens.array[prim__tokens.offset]
                        if (_py_local_tk.idint is lcl_4):
                            prim__tokens.offset += 1
                        else:
                            _py_local_tk = None
                    except IndexError:
                        _py_local_tk = None
                    lcl_4 = _py_local_tk
                    _slot_2 = lcl_4
                    lcl_4 = (_slot_2 is None)
                    if lcl_4:
                        lcl_5 = prim__tokens.offset
                        lcl_5 = (lcl_5, 'quote ) not match')
                        lcl_5 = prim__cons(lcl_5, prim__nil)
                        lcl_5 = lcl_5
                        lcl_5 = (False, lcl_5)
                        lcl_4 = lcl_5
                    else:
                        lcl_5 = _slot_1
                        _slot_local__1 = lcl_5
                        lcl_5 = (True, _slot_local__1)
                        lcl_4 = lcl_5
                    lcl_3 = lcl_4
                lcl_1 = lcl_3
            elif (lcl_2 == 20):
                _py_local_i = prim__tokens.offset
                _py_local_t = prim__tokens.array[_py_local_i]
                prim__tokens.offset = (_py_local_i + 1)
                lcl_3 = _py_local_t
                _slot_0 = lcl_3
                lcl_3 = _slot_0
                lcl_3 = lcl_3.value
                lcl_3 = unesc(lcl_3)
                lcl_3 = Terminal(LITERAL, lcl_3)
                _slot_local__1 = lcl_3
                lcl_3 = (True, _slot_local__1)
                lcl_1 = lcl_3
            elif (lcl_2 == 22):
                lcl_3 = parse_Ident(prim__state, prim__tokens)
                _slot_0_check = lcl_3
                lcl_3 = _slot_0_check[0]
                lcl_3 = (lcl_3 is False)
                if lcl_3:
                    lcl_3 = _slot_0_check
                else:
                    lcl_4 = _slot_0_check[1]
                    lcl_4 = lcl_4
                    _slot_0 = lcl_4
                    lcl_4 = prim__tokens.offset
                    _off_1 = lcl_4
                    lcl_4 = (len(prim__tokens.array) > (prim__tokens.offset + 0))
                    if lcl_4:
                        lcl_6 = prim__tokens.array[(prim__tokens.offset + 0)]
                        lcl_6 = lcl_6.idint
                        if (lcl_6 == 7):
                            _py_local_i = prim__tokens.offset
                            _py_local_t = prim__tokens.array[_py_local_i]
                            prim__tokens.offset = (_py_local_i + 1)
                            lcl_7 = _py_local_t
                            _slot_1 = lcl_7
                            lcl_7 = parse_expr__lst(prim__state, prim__tokens)
                            _slot_2_check = lcl_7
                            lcl_7 = _slot_2_check[0]
                            lcl_7 = (lcl_7 is False)
                            if lcl_7:
                                lcl_7 = _slot_2_check
                            else:
                                lcl_8 = _slot_2_check[1]
                                lcl_8 = lcl_8
                                _slot_2 = lcl_8
                                lcl_8 = 8
                                try:
                                    _py_local_tk = prim__tokens.array[prim__tokens.offset]
                                    if (_py_local_tk.idint is lcl_8):
                                        prim__tokens.offset += 1
                                    else:
                                        _py_local_tk = None
                                except IndexError:
                                    _py_local_tk = None
                                lcl_8 = _py_local_tk
                                _slot_3 = lcl_8
                                lcl_8 = (_slot_3 is None)
                                if lcl_8:
                                    lcl_9 = prim__tokens.offset
                                    lcl_9 = (lcl_9, 'quote ] not match')
                                    lcl_9 = prim__cons(lcl_9, prim__nil)
                                    lcl_9 = lcl_9
                                    lcl_9 = (False, lcl_9)
                                    lcl_8 = lcl_9
                                else:
                                    lcl_9 = _slot_0
                                    lcl_10 = _slot_2
                                    lcl_10 = MacroUse(lcl_9, lcl_10)
                                    _slot_local__1 = lcl_10
                                    lcl_10 = (True, _slot_local__1)
                                    lcl_8 = lcl_10
                                lcl_7 = lcl_8
                            lcl_5 = lcl_7
                        elif (lcl_6 == 9):
                            _py_local_i = prim__tokens.offset
                            _py_local_t = prim__tokens.array[_py_local_i]
                            prim__tokens.offset = (_py_local_i + 1)
                            lcl_10 = _py_local_t
                            _slot_1 = lcl_10
                            lcl_10 = parse_atomExpr(prim__state, prim__tokens)
                            _slot_2_check = lcl_10
                            lcl_10 = _slot_2_check[0]
                            lcl_10 = (lcl_10 is False)
                            if lcl_10:
                                lcl_10 = _slot_2_check
                            else:
                                lcl_7 = _slot_2_check[1]
                                lcl_7 = lcl_7
                                _slot_2 = lcl_7
                                lcl_7 = _slot_0
                                lcl_8 = _slot_2
                                lcl_7 = Bind(lcl_7, lcl_8)
                                _slot_local__1 = lcl_7
                                lcl_7 = (True, _slot_local__1)
                                lcl_10 = lcl_7
                            lcl_5 = lcl_10
                        else:
                            lcl_10 = _slot_0
                            lcl_10 = NonTerminal(lcl_10)
                            _slot_local__1 = lcl_10
                            lcl_10 = (True, _slot_local__1)
                            lcl_5 = lcl_10
                        lcl_4 = lcl_5
                    else:
                        lcl_10 = (_off_1, 'atom got EOF')
                        lcl_10 = prim__cons(lcl_10, prim__nil)
                        lcl_10 = lcl_10
                        lcl_10 = (False, lcl_10)
                        lcl_4 = lcl_10
                    lcl_3 = lcl_4
                lcl_1 = lcl_3
            else:
                lcl_10 = (_off_0, 'atom lookahead failed')
                lcl_10 = prim__cons(lcl_10, prim__nil)
                lcl_10 = lcl_10
                lcl_10 = (False, lcl_10)
                lcl_1 = lcl_10
            lcl_0 = lcl_1
        else:
            lcl_1 = (_off_0, 'atom got EOF')
            lcl_1 = prim__cons(lcl_1, prim__nil)
            lcl_1 = lcl_1
            lcl_1 = (False, lcl_1)
            lcl_0 = lcl_1
        return lcl_0

    def parse_atomExpr(prim__state, prim__tokens):
        lcl_0 = parse_atom(prim__state, prim__tokens)
        _slot_0_check = lcl_0
        lcl_0 = _slot_0_check[0]
        lcl_0 = (lcl_0 is False)
        if lcl_0:
            lcl_0 = _slot_0_check
        else:
            lcl_1 = _slot_0_check[1]
            lcl_1 = lcl_1
            _slot_0 = lcl_1
            lcl_1 = prim__tokens.offset
            _off_0 = lcl_1
            lcl_1 = (len(prim__tokens.array) > (prim__tokens.offset + 0))
            if lcl_1:
                lcl_3 = prim__tokens.array[(prim__tokens.offset + 0)]
                lcl_3 = lcl_3.idint
                if (lcl_3 == 10):
                    _py_local_i = prim__tokens.offset
                    _py_local_t = prim__tokens.array[_py_local_i]
                    prim__tokens.offset = (_py_local_i + 1)
                    lcl_4 = _py_local_t
                    _slot_1 = lcl_4
                    lcl_4 = _slot_0
                    lcl_4 = Optional(lcl_4)
                    _slot_local__1 = lcl_4
                    lcl_4 = (True, _slot_local__1)
                    lcl_2 = lcl_4
                else:
                    lcl_4 = _slot_0
                    _slot_local__1 = lcl_4
                    lcl_4 = (True, _slot_local__1)
                    lcl_2 = lcl_4
                lcl_1 = lcl_2
            else:
                lcl_2 = (_off_0, 'atomExpr got EOF')
                lcl_2 = prim__cons(lcl_2, prim__nil)
                lcl_2 = lcl_2
                lcl_2 = (False, lcl_2)
                lcl_1 = lcl_2
            lcl_0 = lcl_1
        return lcl_0

    def parse_cseq(prim__state, prim__tokens):
        lcl_0 = parse_seq(prim__state, prim__tokens)
        _slot_0_check = lcl_0
        lcl_0 = _slot_0_check[0]
        lcl_0 = (lcl_0 is False)
        if lcl_0:
            lcl_0 = _slot_0_check
        else:
            lcl_1 = _slot_0_check[1]
            lcl_1 = lcl_1
            _slot_0 = lcl_1
            lcl_1 = _slot_0
            lcl_1 = seq(lcl_1)
            _slot_local__1 = lcl_1
            lcl_1 = (True, _slot_local__1)
            lcl_0 = lcl_1
        return lcl_0

    def parse_expr(prim__state, prim__tokens):
        lcl_0 = parse_rbnf__sep__list__2(prim__state, prim__tokens)
        _slot_0_check = lcl_0
        lcl_0 = _slot_0_check[0]
        lcl_0 = (lcl_0 is False)
        if lcl_0:
            lcl_0 = _slot_0_check
        else:
            lcl_1 = _slot_0_check[1]
            lcl_1 = lcl_1
            _slot_0 = lcl_1
            lcl_1 = _slot_0
            lcl_1 = alt(lcl_1)
            _slot_local__1 = lcl_1
            lcl_1 = (True, _slot_local__1)
            lcl_0 = lcl_1
        return lcl_0

    def parse_expr__lst(prim__state, prim__tokens):
        lcl_0 = parse_rbnf__sep__list__0(prim__state, prim__tokens)
        _slot_0_check = lcl_0
        lcl_0 = _slot_0_check[0]
        lcl_0 = (lcl_0 is False)
        if lcl_0:
            lcl_0 = _slot_0_check
        else:
            lcl_1 = _slot_0_check[1]
            lcl_1 = lcl_1
            _slot_0 = lcl_1
            lcl_1 = _slot_0
            _slot_local__1 = lcl_1
            lcl_1 = (True, _slot_local__1)
            lcl_0 = lcl_1
        return lcl_0

    def parse_filename(prim__state, prim__tokens):
        lcl_0 = 20
        try:
            _py_local_tk = prim__tokens.array[prim__tokens.offset]
            if (_py_local_tk.idint is lcl_0):
                prim__tokens.offset += 1
            else:
                _py_local_tk = None
        except IndexError:
            _py_local_tk = None
        lcl_0 = _py_local_tk
        _slot_0 = lcl_0
        lcl_0 = (_slot_0 is None)
        if lcl_0:
            lcl_1 = prim__tokens.offset
            lcl_1 = (lcl_1, 'QuotedStr not match')
            lcl_1 = prim__cons(lcl_1, prim__nil)
            lcl_1 = lcl_1
            lcl_1 = (False, lcl_1)
            lcl_0 = lcl_1
        else:
            lcl_1 = _slot_0
            lcl_1 = lcl_1.value
            lcl_1 = unesc(lcl_1)
            _slot_local__1 = lcl_1
            lcl_1 = (True, _slot_local__1)
            lcl_0 = lcl_1
        return lcl_0

    def parse_lang(prim__state, prim__tokens):
        lcl_0 = parse_lang__atom(prim__state, prim__tokens)
        _slot_0_check = lcl_0
        lcl_0 = _slot_0_check[0]
        lcl_0 = (lcl_0 is False)
        if lcl_0:
            lcl_0 = _slot_0_check
        else:
            lcl_1 = _slot_0_check[1]
            lcl_1 = lcl_1
            _slot_0 = lcl_1
            lcl_1 = _slot_0
            _slot_local__1 = lcl_1
            lcl_1 = lr_loop_lang(_slot_local__1, prim__state, prim__tokens)
            lcl_0 = lcl_1
        return lcl_0

    def parse_lang__atom(prim__state, prim__tokens):
        lcl_0 = prim__tokens.offset
        _off_0 = lcl_0
        lcl_0 = (len(prim__tokens.array) > (prim__tokens.offset + 0))
        if lcl_0:
            lcl_2 = prim__tokens.array[(prim__tokens.offset + 0)]
            lcl_2 = lcl_2.idint
            if (lcl_2 == 7):
                _py_local_i = prim__tokens.offset
                _py_local_t = prim__tokens.array[_py_local_i]
                prim__tokens.offset = (_py_local_i + 1)
                lcl_3 = _py_local_t
                _slot_0 = lcl_3
                lcl_3 = prim__tokens.offset
                _off_1 = lcl_3
                lcl_3 = (len(prim__tokens.array) > (prim__tokens.offset + 0))
                if lcl_3:
                    lcl_5 = prim__tokens.array[(prim__tokens.offset + 0)]
                    lcl_5 = lcl_5.idint
                    if (lcl_5 == 8):
                        _py_local_i = prim__tokens.offset
                        _py_local_t = prim__tokens.array[_py_local_i]
                        prim__tokens.offset = (_py_local_i + 1)
                        lcl_6 = _py_local_t
                        _slot_1 = lcl_6
                        lcl_6 = []
                        lcl_6 = List(lcl_6)
                        _slot_local__1 = lcl_6
                        lcl_6 = (True, _slot_local__1)
                        lcl_4 = lcl_6
                    elif (lcl_5 == 7):
                        lcl_6 = parse_lang__lst(prim__state, prim__tokens)
                        _slot_1_check = lcl_6
                        lcl_6 = _slot_1_check[0]
                        lcl_6 = (lcl_6 is False)
                        if lcl_6:
                            lcl_6 = _slot_1_check
                        else:
                            lcl_7 = _slot_1_check[1]
                            lcl_7 = lcl_7
                            _slot_1 = lcl_7
                            lcl_7 = 8
                            try:
                                _py_local_tk = prim__tokens.array[prim__tokens.offset]
                                if (_py_local_tk.idint is lcl_7):
                                    prim__tokens.offset += 1
                                else:
                                    _py_local_tk = None
                            except IndexError:
                                _py_local_tk = None
                            lcl_7 = _py_local_tk
                            _slot_2 = lcl_7
                            lcl_7 = (_slot_2 is None)
                            if lcl_7:
                                lcl_8 = prim__tokens.offset
                                lcl_8 = (lcl_8, 'quote ] not match')
                                lcl_8 = prim__cons(lcl_8, prim__nil)
                                lcl_8 = lcl_8
                                lcl_8 = (False, lcl_8)
                                lcl_7 = lcl_8
                            else:
                                lcl_8 = _slot_1
                                lcl_8 = List(lcl_8)
                                _slot_local__1 = lcl_8
                                lcl_8 = (True, _slot_local__1)
                                lcl_7 = lcl_8
                            lcl_6 = lcl_7
                        lcl_4 = lcl_6
                    elif (lcl_5 == 5):
                        lcl_6 = parse_lang__lst(prim__state, prim__tokens)
                        _slot_1_check = lcl_6
                        lcl_6 = _slot_1_check[0]
                        lcl_6 = (lcl_6 is False)
                        if lcl_6:
                            lcl_6 = _slot_1_check
                        else:
                            lcl_7 = _slot_1_check[1]
                            lcl_7 = lcl_7
                            _slot_1 = lcl_7
                            lcl_7 = 8
                            try:
                                _py_local_tk = prim__tokens.array[prim__tokens.offset]
                                if (_py_local_tk.idint is lcl_7):
                                    prim__tokens.offset += 1
                                else:
                                    _py_local_tk = None
                            except IndexError:
                                _py_local_tk = None
                            lcl_7 = _py_local_tk
                            _slot_2 = lcl_7
                            lcl_7 = (_slot_2 is None)
                            if lcl_7:
                                lcl_8 = prim__tokens.offset
                                lcl_8 = (lcl_8, 'quote ] not match')
                                lcl_8 = prim__cons(lcl_8, prim__nil)
                                lcl_8 = lcl_8
                                lcl_8 = (False, lcl_8)
                                lcl_7 = lcl_8
                            else:
                                lcl_8 = _slot_1
                                lcl_8 = List(lcl_8)
                                _slot_local__1 = lcl_8
                                lcl_8 = (True, _slot_local__1)
                                lcl_7 = lcl_8
                            lcl_6 = lcl_7
                        lcl_4 = lcl_6
                    elif (lcl_5 == 17):
                        lcl_6 = parse_lang__lst(prim__state, prim__tokens)
                        _slot_1_check = lcl_6
                        lcl_6 = _slot_1_check[0]
                        lcl_6 = (lcl_6 is False)
                        if lcl_6:
                            lcl_6 = _slot_1_check
                        else:
                            lcl_7 = _slot_1_check[1]
                            lcl_7 = lcl_7
                            _slot_1 = lcl_7
                            lcl_7 = 8
                            try:
                                _py_local_tk = prim__tokens.array[prim__tokens.offset]
                                if (_py_local_tk.idint is lcl_7):
                                    prim__tokens.offset += 1
                                else:
                                    _py_local_tk = None
                            except IndexError:
                                _py_local_tk = None
                            lcl_7 = _py_local_tk
                            _slot_2 = lcl_7
                            lcl_7 = (_slot_2 is None)
                            if lcl_7:
                                lcl_8 = prim__tokens.offset
                                lcl_8 = (lcl_8, 'quote ] not match')
                                lcl_8 = prim__cons(lcl_8, prim__nil)
                                lcl_8 = lcl_8
                                lcl_8 = (False, lcl_8)
                                lcl_7 = lcl_8
                            else:
                                lcl_8 = _slot_1
                                lcl_8 = List(lcl_8)
                                _slot_local__1 = lcl_8
                                lcl_8 = (True, _slot_local__1)
                                lcl_7 = lcl_8
                            lcl_6 = lcl_7
                        lcl_4 = lcl_6
                    elif (lcl_5 == 21):
                        lcl_6 = parse_lang__lst(prim__state, prim__tokens)
                        _slot_1_check = lcl_6
                        lcl_6 = _slot_1_check[0]
                        lcl_6 = (lcl_6 is False)
                        if lcl_6:
                            lcl_6 = _slot_1_check
                        else:
                            lcl_7 = _slot_1_check[1]
                            lcl_7 = lcl_7
                            _slot_1 = lcl_7
                            lcl_7 = 8
                            try:
                                _py_local_tk = prim__tokens.array[prim__tokens.offset]
                                if (_py_local_tk.idint is lcl_7):
                                    prim__tokens.offset += 1
                                else:
                                    _py_local_tk = None
                            except IndexError:
                                _py_local_tk = None
                            lcl_7 = _py_local_tk
                            _slot_2 = lcl_7
                            lcl_7 = (_slot_2 is None)
                            if lcl_7:
                                lcl_8 = prim__tokens.offset
                                lcl_8 = (lcl_8, 'quote ] not match')
                                lcl_8 = prim__cons(lcl_8, prim__nil)
                                lcl_8 = lcl_8
                                lcl_8 = (False, lcl_8)
                                lcl_7 = lcl_8
                            else:
                                lcl_8 = _slot_1
                                lcl_8 = List(lcl_8)
                                _slot_local__1 = lcl_8
                                lcl_8 = (True, _slot_local__1)
                                lcl_7 = lcl_8
                            lcl_6 = lcl_7
                        lcl_4 = lcl_6
                    elif (lcl_5 == 22):
                        lcl_6 = parse_lang__lst(prim__state, prim__tokens)
                        _slot_1_check = lcl_6
                        lcl_6 = _slot_1_check[0]
                        lcl_6 = (lcl_6 is False)
                        if lcl_6:
                            lcl_6 = _slot_1_check
                        else:
                            lcl_7 = _slot_1_check[1]
                            lcl_7 = lcl_7
                            _slot_1 = lcl_7
                            lcl_7 = 8
                            try:
                                _py_local_tk = prim__tokens.array[prim__tokens.offset]
                                if (_py_local_tk.idint is lcl_7):
                                    prim__tokens.offset += 1
                                else:
                                    _py_local_tk = None
                            except IndexError:
                                _py_local_tk = None
                            lcl_7 = _py_local_tk
                            _slot_2 = lcl_7
                            lcl_7 = (_slot_2 is None)
                            if lcl_7:
                                lcl_8 = prim__tokens.offset
                                lcl_8 = (lcl_8, 'quote ] not match')
                                lcl_8 = prim__cons(lcl_8, prim__nil)
                                lcl_8 = lcl_8
                                lcl_8 = (False, lcl_8)
                                lcl_7 = lcl_8
                            else:
                                lcl_8 = _slot_1
                                lcl_8 = List(lcl_8)
                                _slot_local__1 = lcl_8
                                lcl_8 = (True, _slot_local__1)
                                lcl_7 = lcl_8
                            lcl_6 = lcl_7
                        lcl_4 = lcl_6
                    else:
                        lcl_6 = (_off_1, 'lang_atom lookahead failed')
                        lcl_6 = prim__cons(lcl_6, prim__nil)
                        lcl_6 = lcl_6
                        lcl_6 = (False, lcl_6)
                        lcl_4 = lcl_6
                    lcl_3 = lcl_4
                else:
                    lcl_4 = (_off_1, 'lang_atom got EOF')
                    lcl_4 = prim__cons(lcl_4, prim__nil)
                    lcl_4 = lcl_4
                    lcl_4 = (False, lcl_4)
                    lcl_3 = lcl_4
                lcl_1 = lcl_3
            elif (lcl_2 == 5):
                _py_local_i = prim__tokens.offset
                _py_local_t = prim__tokens.array[_py_local_i]
                prim__tokens.offset = (_py_local_i + 1)
                lcl_3 = _py_local_t
                _slot_0 = lcl_3
                lcl_3 = prim__tokens.offset
                _off_1 = lcl_3
                lcl_3 = (len(prim__tokens.array) > (prim__tokens.offset + 0))
                if lcl_3:
                    lcl_5 = prim__tokens.array[(prim__tokens.offset + 0)]
                    lcl_5 = lcl_5.idint
                    if (lcl_5 == 7):
                        lcl_6 = parse_lang__lst(prim__state, prim__tokens)
                        _slot_1_check = lcl_6
                        lcl_6 = _slot_1_check[0]
                        lcl_6 = (lcl_6 is False)
                        if lcl_6:
                            lcl_6 = _slot_1_check
                        else:
                            lcl_7 = _slot_1_check[1]
                            lcl_7 = lcl_7
                            _slot_1 = lcl_7
                            lcl_7 = prim__tokens.offset
                            _off_2 = lcl_7
                            lcl_7 = (len(prim__tokens.array) > (prim__tokens.offset + 0))
                            if lcl_7:
                                lcl_9 = prim__tokens.array[(prim__tokens.offset + 0)]
                                lcl_9 = lcl_9.idint
                                if (lcl_9 == 2):
                                    _py_local_i = prim__tokens.offset
                                    _py_local_t = prim__tokens.array[_py_local_i]
                                    prim__tokens.offset = (_py_local_i + 1)
                                    lcl_10 = _py_local_t
                                    _slot_2 = lcl_10
                                    lcl_10 = 6
                                    try:
                                        _py_local_tk = prim__tokens.array[prim__tokens.offset]
                                        if (_py_local_tk.idint is lcl_10):
                                            prim__tokens.offset += 1
                                        else:
                                            _py_local_tk = None
                                    except IndexError:
                                        _py_local_tk = None
                                    lcl_10 = _py_local_tk
                                    _slot_3 = lcl_10
                                    lcl_10 = (_slot_3 is None)
                                    if lcl_10:
                                        lcl_11 = prim__tokens.offset
                                        lcl_11 = (lcl_11, 'quote ) not match')
                                        lcl_11 = prim__cons(lcl_11, prim__nil)
                                        lcl_11 = lcl_11
                                        lcl_11 = (False, lcl_11)
                                        lcl_10 = lcl_11
                                    else:
                                        lcl_11 = _slot_1
                                        lcl_11 = Tuple(lcl_11)
                                        _slot_local__1 = lcl_11
                                        lcl_11 = (True, _slot_local__1)
                                        lcl_10 = lcl_11
                                    lcl_8 = lcl_10
                                elif (lcl_9 == 6):
                                    _py_local_i = prim__tokens.offset
                                    _py_local_t = prim__tokens.array[_py_local_i]
                                    prim__tokens.offset = (_py_local_i + 1)
                                    lcl_10 = _py_local_t
                                    _slot_2 = lcl_10
                                    lcl_10 = _slot_1
                                    lcl_10 = maybeTuple(lcl_10)
                                    _slot_local__1 = lcl_10
                                    lcl_10 = (True, _slot_local__1)
                                    lcl_8 = lcl_10
                                else:
                                    lcl_10 = (_off_2, 'lang_atom lookahead failed')
                                    lcl_10 = prim__cons(lcl_10, prim__nil)
                                    lcl_10 = lcl_10
                                    lcl_10 = (False, lcl_10)
                                    lcl_8 = lcl_10
                                lcl_7 = lcl_8
                            else:
                                lcl_10 = (_off_2, 'lang_atom got EOF')
                                lcl_10 = prim__cons(lcl_10, prim__nil)
                                lcl_10 = lcl_10
                                lcl_10 = (False, lcl_10)
                                lcl_7 = lcl_10
                            lcl_6 = lcl_7
                        lcl_4 = lcl_6
                    elif (lcl_5 == 6):
                        _py_local_i = prim__tokens.offset
                        _py_local_t = prim__tokens.array[_py_local_i]
                        prim__tokens.offset = (_py_local_i + 1)
                        lcl_10 = _py_local_t
                        _slot_1 = lcl_10
                        lcl_10 = []
                        lcl_10 = Tuple(lcl_10)
                        _slot_local__1 = lcl_10
                        lcl_10 = (True, _slot_local__1)
                        lcl_4 = lcl_10
                    elif (lcl_5 == 5):
                        lcl_10 = parse_lang__lst(prim__state, prim__tokens)
                        _slot_1_check = lcl_10
                        lcl_10 = _slot_1_check[0]
                        lcl_10 = (lcl_10 is False)
                        if lcl_10:
                            lcl_10 = _slot_1_check
                        else:
                            lcl_11 = _slot_1_check[1]
                            lcl_11 = lcl_11
                            _slot_1 = lcl_11
                            lcl_11 = prim__tokens.offset
                            _off_2 = lcl_11
                            lcl_11 = (len(prim__tokens.array) > (prim__tokens.offset + 0))
                            if lcl_11:
                                lcl_7 = prim__tokens.array[(prim__tokens.offset + 0)]
                                lcl_7 = lcl_7.idint
                                if (lcl_7 == 2):
                                    _py_local_i = prim__tokens.offset
                                    _py_local_t = prim__tokens.array[_py_local_i]
                                    prim__tokens.offset = (_py_local_i + 1)
                                    lcl_8 = _py_local_t
                                    _slot_2 = lcl_8
                                    lcl_8 = 6
                                    try:
                                        _py_local_tk = prim__tokens.array[prim__tokens.offset]
                                        if (_py_local_tk.idint is lcl_8):
                                            prim__tokens.offset += 1
                                        else:
                                            _py_local_tk = None
                                    except IndexError:
                                        _py_local_tk = None
                                    lcl_8 = _py_local_tk
                                    _slot_3 = lcl_8
                                    lcl_8 = (_slot_3 is None)
                                    if lcl_8:
                                        lcl_9 = prim__tokens.offset
                                        lcl_9 = (lcl_9, 'quote ) not match')
                                        lcl_9 = prim__cons(lcl_9, prim__nil)
                                        lcl_9 = lcl_9
                                        lcl_9 = (False, lcl_9)
                                        lcl_8 = lcl_9
                                    else:
                                        lcl_9 = _slot_1
                                        lcl_9 = Tuple(lcl_9)
                                        _slot_local__1 = lcl_9
                                        lcl_9 = (True, _slot_local__1)
                                        lcl_8 = lcl_9
                                    lcl_6 = lcl_8
                                elif (lcl_7 == 6):
                                    _py_local_i = prim__tokens.offset
                                    _py_local_t = prim__tokens.array[_py_local_i]
                                    prim__tokens.offset = (_py_local_i + 1)
                                    lcl_8 = _py_local_t
                                    _slot_2 = lcl_8
                                    lcl_8 = _slot_1
                                    lcl_8 = maybeTuple(lcl_8)
                                    _slot_local__1 = lcl_8
                                    lcl_8 = (True, _slot_local__1)
                                    lcl_6 = lcl_8
                                else:
                                    lcl_8 = (_off_2, 'lang_atom lookahead failed')
                                    lcl_8 = prim__cons(lcl_8, prim__nil)
                                    lcl_8 = lcl_8
                                    lcl_8 = (False, lcl_8)
                                    lcl_6 = lcl_8
                                lcl_11 = lcl_6
                            else:
                                lcl_6 = (_off_2, 'lang_atom got EOF')
                                lcl_6 = prim__cons(lcl_6, prim__nil)
                                lcl_6 = lcl_6
                                lcl_6 = (False, lcl_6)
                                lcl_11 = lcl_6
                            lcl_10 = lcl_11
                        lcl_4 = lcl_10
                    elif (lcl_5 == 17):
                        lcl_10 = parse_lang__lst(prim__state, prim__tokens)
                        _slot_1_check = lcl_10
                        lcl_10 = _slot_1_check[0]
                        lcl_10 = (lcl_10 is False)
                        if lcl_10:
                            lcl_10 = _slot_1_check
                        else:
                            lcl_11 = _slot_1_check[1]
                            lcl_11 = lcl_11
                            _slot_1 = lcl_11
                            lcl_11 = prim__tokens.offset
                            _off_2 = lcl_11
                            lcl_11 = (len(prim__tokens.array) > (prim__tokens.offset + 0))
                            if lcl_11:
                                lcl_7 = prim__tokens.array[(prim__tokens.offset + 0)]
                                lcl_7 = lcl_7.idint
                                if (lcl_7 == 2):
                                    _py_local_i = prim__tokens.offset
                                    _py_local_t = prim__tokens.array[_py_local_i]
                                    prim__tokens.offset = (_py_local_i + 1)
                                    lcl_8 = _py_local_t
                                    _slot_2 = lcl_8
                                    lcl_8 = 6
                                    try:
                                        _py_local_tk = prim__tokens.array[prim__tokens.offset]
                                        if (_py_local_tk.idint is lcl_8):
                                            prim__tokens.offset += 1
                                        else:
                                            _py_local_tk = None
                                    except IndexError:
                                        _py_local_tk = None
                                    lcl_8 = _py_local_tk
                                    _slot_3 = lcl_8
                                    lcl_8 = (_slot_3 is None)
                                    if lcl_8:
                                        lcl_9 = prim__tokens.offset
                                        lcl_9 = (lcl_9, 'quote ) not match')
                                        lcl_9 = prim__cons(lcl_9, prim__nil)
                                        lcl_9 = lcl_9
                                        lcl_9 = (False, lcl_9)
                                        lcl_8 = lcl_9
                                    else:
                                        lcl_9 = _slot_1
                                        lcl_9 = Tuple(lcl_9)
                                        _slot_local__1 = lcl_9
                                        lcl_9 = (True, _slot_local__1)
                                        lcl_8 = lcl_9
                                    lcl_6 = lcl_8
                                elif (lcl_7 == 6):
                                    _py_local_i = prim__tokens.offset
                                    _py_local_t = prim__tokens.array[_py_local_i]
                                    prim__tokens.offset = (_py_local_i + 1)
                                    lcl_8 = _py_local_t
                                    _slot_2 = lcl_8
                                    lcl_8 = _slot_1
                                    lcl_8 = maybeTuple(lcl_8)
                                    _slot_local__1 = lcl_8
                                    lcl_8 = (True, _slot_local__1)
                                    lcl_6 = lcl_8
                                else:
                                    lcl_8 = (_off_2, 'lang_atom lookahead failed')
                                    lcl_8 = prim__cons(lcl_8, prim__nil)
                                    lcl_8 = lcl_8
                                    lcl_8 = (False, lcl_8)
                                    lcl_6 = lcl_8
                                lcl_11 = lcl_6
                            else:
                                lcl_6 = (_off_2, 'lang_atom got EOF')
                                lcl_6 = prim__cons(lcl_6, prim__nil)
                                lcl_6 = lcl_6
                                lcl_6 = (False, lcl_6)
                                lcl_11 = lcl_6
                            lcl_10 = lcl_11
                        lcl_4 = lcl_10
                    elif (lcl_5 == 21):
                        lcl_10 = parse_lang__lst(prim__state, prim__tokens)
                        _slot_1_check = lcl_10
                        lcl_10 = _slot_1_check[0]
                        lcl_10 = (lcl_10 is False)
                        if lcl_10:
                            lcl_10 = _slot_1_check
                        else:
                            lcl_11 = _slot_1_check[1]
                            lcl_11 = lcl_11
                            _slot_1 = lcl_11
                            lcl_11 = prim__tokens.offset
                            _off_2 = lcl_11
                            lcl_11 = (len(prim__tokens.array) > (prim__tokens.offset + 0))
                            if lcl_11:
                                lcl_7 = prim__tokens.array[(prim__tokens.offset + 0)]
                                lcl_7 = lcl_7.idint
                                if (lcl_7 == 2):
                                    _py_local_i = prim__tokens.offset
                                    _py_local_t = prim__tokens.array[_py_local_i]
                                    prim__tokens.offset = (_py_local_i + 1)
                                    lcl_8 = _py_local_t
                                    _slot_2 = lcl_8
                                    lcl_8 = 6
                                    try:
                                        _py_local_tk = prim__tokens.array[prim__tokens.offset]
                                        if (_py_local_tk.idint is lcl_8):
                                            prim__tokens.offset += 1
                                        else:
                                            _py_local_tk = None
                                    except IndexError:
                                        _py_local_tk = None
                                    lcl_8 = _py_local_tk
                                    _slot_3 = lcl_8
                                    lcl_8 = (_slot_3 is None)
                                    if lcl_8:
                                        lcl_9 = prim__tokens.offset
                                        lcl_9 = (lcl_9, 'quote ) not match')
                                        lcl_9 = prim__cons(lcl_9, prim__nil)
                                        lcl_9 = lcl_9
                                        lcl_9 = (False, lcl_9)
                                        lcl_8 = lcl_9
                                    else:
                                        lcl_9 = _slot_1
                                        lcl_9 = Tuple(lcl_9)
                                        _slot_local__1 = lcl_9
                                        lcl_9 = (True, _slot_local__1)
                                        lcl_8 = lcl_9
                                    lcl_6 = lcl_8
                                elif (lcl_7 == 6):
                                    _py_local_i = prim__tokens.offset
                                    _py_local_t = prim__tokens.array[_py_local_i]
                                    prim__tokens.offset = (_py_local_i + 1)
                                    lcl_8 = _py_local_t
                                    _slot_2 = lcl_8
                                    lcl_8 = _slot_1
                                    lcl_8 = maybeTuple(lcl_8)
                                    _slot_local__1 = lcl_8
                                    lcl_8 = (True, _slot_local__1)
                                    lcl_6 = lcl_8
                                else:
                                    lcl_8 = (_off_2, 'lang_atom lookahead failed')
                                    lcl_8 = prim__cons(lcl_8, prim__nil)
                                    lcl_8 = lcl_8
                                    lcl_8 = (False, lcl_8)
                                    lcl_6 = lcl_8
                                lcl_11 = lcl_6
                            else:
                                lcl_6 = (_off_2, 'lang_atom got EOF')
                                lcl_6 = prim__cons(lcl_6, prim__nil)
                                lcl_6 = lcl_6
                                lcl_6 = (False, lcl_6)
                                lcl_11 = lcl_6
                            lcl_10 = lcl_11
                        lcl_4 = lcl_10
                    elif (lcl_5 == 22):
                        lcl_10 = parse_lang__lst(prim__state, prim__tokens)
                        _slot_1_check = lcl_10
                        lcl_10 = _slot_1_check[0]
                        lcl_10 = (lcl_10 is False)
                        if lcl_10:
                            lcl_10 = _slot_1_check
                        else:
                            lcl_11 = _slot_1_check[1]
                            lcl_11 = lcl_11
                            _slot_1 = lcl_11
                            lcl_11 = prim__tokens.offset
                            _off_2 = lcl_11
                            lcl_11 = (len(prim__tokens.array) > (prim__tokens.offset + 0))
                            if lcl_11:
                                lcl_7 = prim__tokens.array[(prim__tokens.offset + 0)]
                                lcl_7 = lcl_7.idint
                                if (lcl_7 == 2):
                                    _py_local_i = prim__tokens.offset
                                    _py_local_t = prim__tokens.array[_py_local_i]
                                    prim__tokens.offset = (_py_local_i + 1)
                                    lcl_8 = _py_local_t
                                    _slot_2 = lcl_8
                                    lcl_8 = 6
                                    try:
                                        _py_local_tk = prim__tokens.array[prim__tokens.offset]
                                        if (_py_local_tk.idint is lcl_8):
                                            prim__tokens.offset += 1
                                        else:
                                            _py_local_tk = None
                                    except IndexError:
                                        _py_local_tk = None
                                    lcl_8 = _py_local_tk
                                    _slot_3 = lcl_8
                                    lcl_8 = (_slot_3 is None)
                                    if lcl_8:
                                        lcl_9 = prim__tokens.offset
                                        lcl_9 = (lcl_9, 'quote ) not match')
                                        lcl_9 = prim__cons(lcl_9, prim__nil)
                                        lcl_9 = lcl_9
                                        lcl_9 = (False, lcl_9)
                                        lcl_8 = lcl_9
                                    else:
                                        lcl_9 = _slot_1
                                        lcl_9 = Tuple(lcl_9)
                                        _slot_local__1 = lcl_9
                                        lcl_9 = (True, _slot_local__1)
                                        lcl_8 = lcl_9
                                    lcl_6 = lcl_8
                                elif (lcl_7 == 6):
                                    _py_local_i = prim__tokens.offset
                                    _py_local_t = prim__tokens.array[_py_local_i]
                                    prim__tokens.offset = (_py_local_i + 1)
                                    lcl_8 = _py_local_t
                                    _slot_2 = lcl_8
                                    lcl_8 = _slot_1
                                    lcl_8 = maybeTuple(lcl_8)
                                    _slot_local__1 = lcl_8
                                    lcl_8 = (True, _slot_local__1)
                                    lcl_6 = lcl_8
                                else:
                                    lcl_8 = (_off_2, 'lang_atom lookahead failed')
                                    lcl_8 = prim__cons(lcl_8, prim__nil)
                                    lcl_8 = lcl_8
                                    lcl_8 = (False, lcl_8)
                                    lcl_6 = lcl_8
                                lcl_11 = lcl_6
                            else:
                                lcl_6 = (_off_2, 'lang_atom got EOF')
                                lcl_6 = prim__cons(lcl_6, prim__nil)
                                lcl_6 = lcl_6
                                lcl_6 = (False, lcl_6)
                                lcl_11 = lcl_6
                            lcl_10 = lcl_11
                        lcl_4 = lcl_10
                    else:
                        lcl_10 = (_off_1, 'lang_atom lookahead failed')
                        lcl_10 = prim__cons(lcl_10, prim__nil)
                        lcl_10 = lcl_10
                        lcl_10 = (False, lcl_10)
                        lcl_4 = lcl_10
                    lcl_3 = lcl_4
                else:
                    lcl_10 = (_off_1, 'lang_atom got EOF')
                    lcl_10 = prim__cons(lcl_10, prim__nil)
                    lcl_10 = lcl_10
                    lcl_10 = (False, lcl_10)
                    lcl_3 = lcl_10
                lcl_1 = lcl_3
            elif (lcl_2 == 17):
                _py_local_i = prim__tokens.offset
                _py_local_t = prim__tokens.array[_py_local_i]
                prim__tokens.offset = (_py_local_i + 1)
                lcl_10 = _py_local_t
                _slot_0 = lcl_10
                lcl_10 = 21
                try:
                    _py_local_tk = prim__tokens.array[prim__tokens.offset]
                    if (_py_local_tk.idint is lcl_10):
                        prim__tokens.offset += 1
                    else:
                        _py_local_tk = None
                except IndexError:
                    _py_local_tk = None
                lcl_10 = _py_local_tk
                _slot_1 = lcl_10
                lcl_10 = (_slot_1 is None)
                if lcl_10:
                    lcl_11 = prim__tokens.offset
                    lcl_11 = (lcl_11, 'Int not match')
                    lcl_11 = prim__cons(lcl_11, prim__nil)
                    lcl_11 = lcl_11
                    lcl_11 = (False, lcl_11)
                    lcl_10 = lcl_11
                else:
                    lcl_11 = _slot_1
                    lcl_11 = lcl_11.value
                    lcl_11 = int(lcl_11)
                    lcl_11 = Slot(lcl_11)
                    _slot_local__1 = lcl_11
                    lcl_11 = (True, _slot_local__1)
                    lcl_10 = lcl_11
                lcl_1 = lcl_10
            elif (lcl_2 == 21):
                _py_local_i = prim__tokens.offset
                _py_local_t = prim__tokens.array[_py_local_i]
                prim__tokens.offset = (_py_local_i + 1)
                lcl_10 = _py_local_t
                _slot_0 = lcl_10
                lcl_10 = _slot_0
                lcl_10 = lcl_10.value
                lcl_10 = int(lcl_10)
                lcl_10 = Int(lcl_10)
                _slot_local__1 = lcl_10
                lcl_10 = (True, _slot_local__1)
                lcl_1 = lcl_10
            elif (lcl_2 == 22):
                lcl_10 = parse_Ident(prim__state, prim__tokens)
                _slot_0_check = lcl_10
                lcl_10 = _slot_0_check[0]
                lcl_10 = (lcl_10 is False)
                if lcl_10:
                    lcl_10 = _slot_0_check
                else:
                    lcl_11 = _slot_0_check[1]
                    lcl_11 = lcl_11
                    _slot_0 = lcl_11
                    lcl_11 = _slot_0
                    lcl_11 = Var(lcl_11)
                    _slot_local__1 = lcl_11
                    lcl_11 = (True, _slot_local__1)
                    lcl_10 = lcl_11
                lcl_1 = lcl_10
            else:
                lcl_10 = (_off_0, 'lang_atom lookahead failed')
                lcl_10 = prim__cons(lcl_10, prim__nil)
                lcl_10 = lcl_10
                lcl_10 = (False, lcl_10)
                lcl_1 = lcl_10
            lcl_0 = lcl_1
        else:
            lcl_1 = (_off_0, 'lang_atom got EOF')
            lcl_1 = prim__cons(lcl_1, prim__nil)
            lcl_1 = lcl_1
            lcl_1 = (False, lcl_1)
            lcl_0 = lcl_1
        return lcl_0

    def parse_lang__lst(prim__state, prim__tokens):
        lcl_0 = parse_rbnf__sep__list__5(prim__state, prim__tokens)
        _slot_0_check = lcl_0
        lcl_0 = _slot_0_check[0]
        lcl_0 = (lcl_0 is False)
        if lcl_0:
            lcl_0 = _slot_0_check
        else:
            lcl_1 = _slot_0_check[1]
            lcl_1 = lcl_1
            _slot_0 = lcl_1
            lcl_1 = _slot_0
            _slot_local__1 = lcl_1
            lcl_1 = (True, _slot_local__1)
            lcl_0 = lcl_1
        return lcl_0

    def parse_pragma(prim__state, prim__tokens):
        lcl_0 = prim__tokens.offset
        _off_0 = lcl_0
        lcl_0 = (len(prim__tokens.array) > (prim__tokens.offset + 0))
        if lcl_0:
            lcl_2 = prim__tokens.array[(prim__tokens.offset + 0)]
            lcl_2 = lcl_2.idint
            if (lcl_2 == 18):
                _py_local_i = prim__tokens.offset
                _py_local_t = prim__tokens.array[_py_local_i]
                prim__tokens.offset = (_py_local_i + 1)
                lcl_3 = _py_local_t
                _slot_0 = lcl_3
                lcl_3 = prim__tokens.offset
                _off_1 = lcl_3
                lcl_3 = (len(prim__tokens.array) > (prim__tokens.offset + 0))
                if lcl_3:
                    lcl_5 = prim__tokens.array[(prim__tokens.offset + 0)]
                    lcl_5 = lcl_5.idint
                    if (lcl_5 == 20):
                        lcl_6 = parse_rbnf__sep__list__6(prim__state, prim__tokens)
                        _slot_1_check = lcl_6
                        lcl_6 = _slot_1_check[0]
                        lcl_6 = (lcl_6 is False)
                        if lcl_6:
                            lcl_6 = _slot_1_check
                        else:
                            lcl_7 = _slot_1_check[1]
                            lcl_7 = lcl_7
                            _slot_1 = lcl_7
                            lcl_7 = _slot_1
                            lcl_7 = Include(None, lcl_7)
                            _slot_local__1 = lcl_7
                            lcl_7 = (True, _slot_local__1)
                            lcl_6 = lcl_7
                        lcl_4 = lcl_6
                    elif (lcl_5 == 22):
                        lcl_6 = parse_Ident(prim__state, prim__tokens)
                        _slot_1_check = lcl_6
                        lcl_6 = _slot_1_check[0]
                        lcl_6 = (lcl_6 is False)
                        if lcl_6:
                            lcl_6 = _slot_1_check
                        else:
                            lcl_7 = _slot_1_check[1]
                            lcl_7 = lcl_7
                            _slot_1 = lcl_7
                            lcl_7 = parse_rbnf__sep__list__6(prim__state, prim__tokens)
                            _slot_2_check = lcl_7
                            lcl_7 = _slot_2_check[0]
                            lcl_7 = (lcl_7 is False)
                            if lcl_7:
                                lcl_7 = _slot_2_check
                            else:
                                lcl_8 = _slot_2_check[1]
                                lcl_8 = lcl_8
                                _slot_2 = lcl_8
                                lcl_8 = _slot_1
                                lcl_9 = _slot_2
                                lcl_8 = Include(lcl_8, lcl_9)
                                _slot_local__1 = lcl_8
                                lcl_8 = (True, _slot_local__1)
                                lcl_7 = lcl_8
                            lcl_6 = lcl_7
                        lcl_4 = lcl_6
                    else:
                        lcl_6 = (_off_1, 'pragma lookahead failed')
                        lcl_6 = prim__cons(lcl_6, prim__nil)
                        lcl_6 = lcl_6
                        lcl_6 = (False, lcl_6)
                        lcl_4 = lcl_6
                    lcl_3 = lcl_4
                else:
                    lcl_4 = (_off_1, 'pragma got EOF')
                    lcl_4 = prim__cons(lcl_4, prim__nil)
                    lcl_4 = lcl_4
                    lcl_4 = (False, lcl_4)
                    lcl_3 = lcl_4
                lcl_1 = lcl_3
            elif (lcl_2 == 22):
                _py_local_i = prim__tokens.offset
                _py_local_t = prim__tokens.array[_py_local_i]
                prim__tokens.offset = (_py_local_i + 1)
                lcl_3 = _py_local_t
                _slot_0 = lcl_3
                lcl_3 = 24
                try:
                    _py_local_tk = prim__tokens.array[prim__tokens.offset]
                    if (_py_local_tk.idint is lcl_3):
                        prim__tokens.offset += 1
                    else:
                        _py_local_tk = None
                except IndexError:
                    _py_local_tk = None
                lcl_3 = _py_local_tk
                _slot_1 = lcl_3
                lcl_3 = (_slot_1 is None)
                if lcl_3:
                    lcl_4 = prim__tokens.offset
                    lcl_4 = (lcl_4, 'Code not match')
                    lcl_4 = prim__cons(lcl_4, prim__nil)
                    lcl_4 = lcl_4
                    lcl_4 = (False, lcl_4)
                    lcl_3 = lcl_4
                else:
                    lcl_4 = _slot_0
                    lcl_4 = lcl_4.value
                    lcl_5 = _slot_1
                    lcl_5 = lcl_5.value
                    lcl_5 = (lcl_5,)
                    lcl_5 = [lcl_5]
                    lcl_4 = Include(lcl_4, lcl_5)
                    _slot_local__1 = lcl_4
                    lcl_4 = (True, _slot_local__1)
                    lcl_3 = lcl_4
                lcl_1 = lcl_3
            elif (lcl_2 == 24):
                _py_local_i = prim__tokens.offset
                _py_local_t = prim__tokens.array[_py_local_i]
                prim__tokens.offset = (_py_local_i + 1)
                lcl_3 = _py_local_t
                _slot_0 = lcl_3
                lcl_3 = _slot_0
                lcl_3 = lcl_3.value
                lcl_3 = (lcl_3,)
                lcl_3 = [lcl_3]
                lcl_3 = Include(None, lcl_3)
                _slot_local__1 = lcl_3
                lcl_3 = (True, _slot_local__1)
                lcl_1 = lcl_3
            else:
                lcl_3 = (_off_0, 'pragma lookahead failed')
                lcl_3 = prim__cons(lcl_3, prim__nil)
                lcl_3 = lcl_3
                lcl_3 = (False, lcl_3)
                lcl_1 = lcl_3
            lcl_0 = lcl_1
        else:
            lcl_1 = (_off_0, 'pragma got EOF')
            lcl_1 = prim__cons(lcl_1, prim__nil)
            lcl_1 = lcl_1
            lcl_1 = (False, lcl_1)
            lcl_0 = lcl_1
        return lcl_0

    def parse_prod(prim__state, prim__tokens):
        lcl_0 = parse_Ident(prim__state, prim__tokens)
        _slot_0_check = lcl_0
        lcl_0 = _slot_0_check[0]
        lcl_0 = (lcl_0 is False)
        if lcl_0:
            lcl_0 = _slot_0_check
        else:
            lcl_1 = _slot_0_check[1]
            lcl_1 = lcl_1
            _slot_0 = lcl_1
            lcl_1 = prim__tokens.offset
            _off_0 = lcl_1
            lcl_1 = (len(prim__tokens.array) > (prim__tokens.offset + 0))
            if lcl_1:
                lcl_3 = prim__tokens.array[(prim__tokens.offset + 0)]
                lcl_3 = lcl_3.idint
                if (lcl_3 == 7):
                    _py_local_i = prim__tokens.offset
                    _py_local_t = prim__tokens.array[_py_local_i]
                    prim__tokens.offset = (_py_local_i + 1)
                    lcl_4 = _py_local_t
                    _slot_1 = lcl_4
                    lcl_4 = prim__tokens.offset
                    _off_1 = lcl_4
                    lcl_4 = (len(prim__tokens.array) > (prim__tokens.offset + 0))
                    if lcl_4:
                        lcl_6 = prim__tokens.array[(prim__tokens.offset + 0)]
                        lcl_6 = lcl_6.idint
                        if (lcl_6 == 8):
                            _py_local_i = prim__tokens.offset
                            _py_local_t = prim__tokens.array[_py_local_i]
                            prim__tokens.offset = (_py_local_i + 1)
                            lcl_7 = _py_local_t
                            _slot_2 = lcl_7
                            lcl_7 = prim__tokens.offset
                            _off_2 = lcl_7
                            lcl_7 = (len(prim__tokens.array) > (prim__tokens.offset + 0))
                            if lcl_7:
                                lcl_9 = prim__tokens.array[(prim__tokens.offset + 0)]
                                lcl_9 = lcl_9.idint
                                if (lcl_9 == 16):
                                    _py_local_i = prim__tokens.offset
                                    _py_local_t = prim__tokens.array[_py_local_i]
                                    prim__tokens.offset = (_py_local_i + 1)
                                    lcl_10 = _py_local_t
                                    _slot_3 = lcl_10
                                    lcl_10 = parse_expr(prim__state, prim__tokens)
                                    _slot_4_check = lcl_10
                                    lcl_10 = _slot_4_check[0]
                                    lcl_10 = (lcl_10 is False)
                                    if lcl_10:
                                        lcl_10 = _slot_4_check
                                    else:
                                        lcl_11 = _slot_4_check[1]
                                        lcl_11 = lcl_11
                                        _slot_4 = lcl_11
                                        lcl_11 = 15
                                        try:
                                            _py_local_tk = prim__tokens.array[prim__tokens.offset]
                                            if (_py_local_tk.idint is lcl_11):
                                                prim__tokens.offset += 1
                                            else:
                                                _py_local_tk = None
                                        except IndexError:
                                            _py_local_tk = None
                                        lcl_11 = _py_local_tk
                                        _slot_5 = lcl_11
                                        lcl_11 = (_slot_5 is None)
                                        if lcl_11:
                                            lcl_12 = prim__tokens.offset
                                            lcl_12 = (lcl_12, 'quote ; not match')
                                            lcl_12 = prim__cons(lcl_12, prim__nil)
                                            lcl_12 = lcl_12
                                            lcl_12 = (False, lcl_12)
                                            lcl_11 = lcl_12
                                        else:
                                            lcl_12 = _slot_0
                                            lcl_13 = []
                                            lcl_14 = _slot_4
                                            lcl_12 = MacroDef(lcl_12, lcl_13, Alias, lcl_14)
                                            _slot_local__1 = lcl_12
                                            lcl_12 = (True, _slot_local__1)
                                            lcl_11 = lcl_12
                                        lcl_10 = lcl_11
                                    lcl_8 = lcl_10
                                elif (lcl_9 == 14):
                                    _py_local_i = prim__tokens.offset
                                    _py_local_t = prim__tokens.array[_py_local_i]
                                    prim__tokens.offset = (_py_local_i + 1)
                                    lcl_10 = _py_local_t
                                    _slot_3 = lcl_10
                                    lcl_10 = parse_alts(prim__state, prim__tokens)
                                    _slot_4_check = lcl_10
                                    lcl_10 = _slot_4_check[0]
                                    lcl_10 = (lcl_10 is False)
                                    if lcl_10:
                                        lcl_10 = _slot_4_check
                                    else:
                                        lcl_11 = _slot_4_check[1]
                                        lcl_11 = lcl_11
                                        _slot_4 = lcl_11
                                        lcl_11 = 15
                                        try:
                                            _py_local_tk = prim__tokens.array[prim__tokens.offset]
                                            if (_py_local_tk.idint is lcl_11):
                                                prim__tokens.offset += 1
                                            else:
                                                _py_local_tk = None
                                        except IndexError:
                                            _py_local_tk = None
                                        lcl_11 = _py_local_tk
                                        _slot_5 = lcl_11
                                        lcl_11 = (_slot_5 is None)
                                        if lcl_11:
                                            lcl_12 = prim__tokens.offset
                                            lcl_12 = (lcl_12, 'quote ; not match')
                                            lcl_12 = prim__cons(lcl_12, prim__nil)
                                            lcl_12 = lcl_12
                                            lcl_12 = (False, lcl_12)
                                            lcl_11 = lcl_12
                                        else:
                                            lcl_12 = _slot_0
                                            lcl_13 = []
                                            lcl_14 = _slot_4
                                            lcl_12 = MacroDef(lcl_12, lcl_13, Define, lcl_14)
                                            _slot_local__1 = lcl_12
                                            lcl_12 = (True, _slot_local__1)
                                            lcl_11 = lcl_12
                                        lcl_10 = lcl_11
                                    lcl_8 = lcl_10
                                else:
                                    lcl_10 = (_off_2, 'prod lookahead failed')
                                    lcl_10 = prim__cons(lcl_10, prim__nil)
                                    lcl_10 = lcl_10
                                    lcl_10 = (False, lcl_10)
                                    lcl_8 = lcl_10
                                lcl_7 = lcl_8
                            else:
                                lcl_10 = (_off_2, 'prod got EOF')
                                lcl_10 = prim__cons(lcl_10, prim__nil)
                                lcl_10 = lcl_10
                                lcl_10 = (False, lcl_10)
                                lcl_7 = lcl_10
                            lcl_5 = lcl_7
                        elif (lcl_6 == 22):
                            lcl_10 = parse_IdentList(prim__state, prim__tokens)
                            _slot_2_check = lcl_10
                            lcl_10 = _slot_2_check[0]
                            lcl_10 = (lcl_10 is False)
                            if lcl_10:
                                lcl_10 = _slot_2_check
                            else:
                                lcl_11 = _slot_2_check[1]
                                lcl_11 = lcl_11
                                _slot_2 = lcl_11
                                lcl_11 = 8
                                try:
                                    _py_local_tk = prim__tokens.array[prim__tokens.offset]
                                    if (_py_local_tk.idint is lcl_11):
                                        prim__tokens.offset += 1
                                    else:
                                        _py_local_tk = None
                                except IndexError:
                                    _py_local_tk = None
                                lcl_11 = _py_local_tk
                                _slot_3 = lcl_11
                                lcl_11 = (_slot_3 is None)
                                if lcl_11:
                                    lcl_12 = prim__tokens.offset
                                    lcl_12 = (lcl_12, 'quote ] not match')
                                    lcl_12 = prim__cons(lcl_12, prim__nil)
                                    lcl_12 = lcl_12
                                    lcl_12 = (False, lcl_12)
                                    lcl_11 = lcl_12
                                else:
                                    lcl_12 = prim__tokens.offset
                                    _off_3 = lcl_12
                                    lcl_12 = (len(prim__tokens.array) > (prim__tokens.offset + 0))
                                    if lcl_12:
                                        lcl_14 = prim__tokens.array[(prim__tokens.offset + 0)]
                                        lcl_14 = lcl_14.idint
                                        if (lcl_14 == 16):
                                            _py_local_i = prim__tokens.offset
                                            _py_local_t = prim__tokens.array[_py_local_i]
                                            prim__tokens.offset = (_py_local_i + 1)
                                            lcl_7 = _py_local_t
                                            _slot_4 = lcl_7
                                            lcl_7 = parse_expr(prim__state, prim__tokens)
                                            _slot_5_check = lcl_7
                                            lcl_7 = _slot_5_check[0]
                                            lcl_7 = (lcl_7 is False)
                                            if lcl_7:
                                                lcl_7 = _slot_5_check
                                            else:
                                                lcl_8 = _slot_5_check[1]
                                                lcl_8 = lcl_8
                                                _slot_5 = lcl_8
                                                lcl_8 = 15
                                                try:
                                                    _py_local_tk = prim__tokens.array[prim__tokens.offset]
                                                    if (_py_local_tk.idint is lcl_8):
                                                        prim__tokens.offset += 1
                                                    else:
                                                        _py_local_tk = None
                                                except IndexError:
                                                    _py_local_tk = None
                                                lcl_8 = _py_local_tk
                                                _slot_6 = lcl_8
                                                lcl_8 = (_slot_6 is None)
                                                if lcl_8:
                                                    lcl_9 = prim__tokens.offset
                                                    lcl_9 = (lcl_9, 'quote ; not match')
                                                    lcl_9 = prim__cons(lcl_9, prim__nil)
                                                    lcl_9 = lcl_9
                                                    lcl_9 = (False, lcl_9)
                                                    lcl_8 = lcl_9
                                                else:
                                                    lcl_9 = _slot_0
                                                    lcl_15 = _slot_2
                                                    lcl_16 = _slot_5
                                                    lcl_15 = MacroDef(lcl_9, lcl_15, Alias, lcl_16)
                                                    _slot_local__1 = lcl_15
                                                    lcl_15 = (True, _slot_local__1)
                                                    lcl_8 = lcl_15
                                                lcl_7 = lcl_8
                                            lcl_13 = lcl_7
                                        elif (lcl_14 == 14):
                                            _py_local_i = prim__tokens.offset
                                            _py_local_t = prim__tokens.array[_py_local_i]
                                            prim__tokens.offset = (_py_local_i + 1)
                                            lcl_15 = _py_local_t
                                            _slot_4 = lcl_15
                                            lcl_15 = parse_alts(prim__state, prim__tokens)
                                            _slot_5_check = lcl_15
                                            lcl_15 = _slot_5_check[0]
                                            lcl_15 = (lcl_15 is False)
                                            if lcl_15:
                                                lcl_15 = _slot_5_check
                                            else:
                                                lcl_16 = _slot_5_check[1]
                                                lcl_16 = lcl_16
                                                _slot_5 = lcl_16
                                                lcl_16 = 15
                                                try:
                                                    _py_local_tk = prim__tokens.array[prim__tokens.offset]
                                                    if (_py_local_tk.idint is lcl_16):
                                                        prim__tokens.offset += 1
                                                    else:
                                                        _py_local_tk = None
                                                except IndexError:
                                                    _py_local_tk = None
                                                lcl_16 = _py_local_tk
                                                _slot_6 = lcl_16
                                                lcl_16 = (_slot_6 is None)
                                                if lcl_16:
                                                    lcl_7 = prim__tokens.offset
                                                    lcl_7 = (lcl_7, 'quote ; not match')
                                                    lcl_7 = prim__cons(lcl_7, prim__nil)
                                                    lcl_7 = lcl_7
                                                    lcl_7 = (False, lcl_7)
                                                    lcl_16 = lcl_7
                                                else:
                                                    lcl_7 = _slot_0
                                                    lcl_8 = _slot_2
                                                    lcl_9 = _slot_5
                                                    lcl_7 = MacroDef(lcl_7, lcl_8, Define, lcl_9)
                                                    _slot_local__1 = lcl_7
                                                    lcl_7 = (True, _slot_local__1)
                                                    lcl_16 = lcl_7
                                                lcl_15 = lcl_16
                                            lcl_13 = lcl_15
                                        else:
                                            lcl_15 = (_off_3, 'prod lookahead failed')
                                            lcl_15 = prim__cons(lcl_15, prim__nil)
                                            lcl_15 = lcl_15
                                            lcl_15 = (False, lcl_15)
                                            lcl_13 = lcl_15
                                        lcl_12 = lcl_13
                                    else:
                                        lcl_13 = (_off_3, 'prod got EOF')
                                        lcl_13 = prim__cons(lcl_13, prim__nil)
                                        lcl_13 = lcl_13
                                        lcl_13 = (False, lcl_13)
                                        lcl_12 = lcl_13
                                    lcl_11 = lcl_12
                                lcl_10 = lcl_11
                            lcl_5 = lcl_10
                        else:
                            lcl_10 = (_off_1, 'prod lookahead failed')
                            lcl_10 = prim__cons(lcl_10, prim__nil)
                            lcl_10 = lcl_10
                            lcl_10 = (False, lcl_10)
                            lcl_5 = lcl_10
                        lcl_4 = lcl_5
                    else:
                        lcl_10 = (_off_1, 'prod got EOF')
                        lcl_10 = prim__cons(lcl_10, prim__nil)
                        lcl_10 = lcl_10
                        lcl_10 = (False, lcl_10)
                        lcl_4 = lcl_10
                    lcl_2 = lcl_4
                elif (lcl_3 == 16):
                    _py_local_i = prim__tokens.offset
                    _py_local_t = prim__tokens.array[_py_local_i]
                    prim__tokens.offset = (_py_local_i + 1)
                    lcl_10 = _py_local_t
                    _slot_1 = lcl_10
                    lcl_10 = parse_expr(prim__state, prim__tokens)
                    _slot_2_check = lcl_10
                    lcl_10 = _slot_2_check[0]
                    lcl_10 = (lcl_10 is False)
                    if lcl_10:
                        lcl_10 = _slot_2_check
                    else:
                        lcl_11 = _slot_2_check[1]
                        lcl_11 = lcl_11
                        _slot_2 = lcl_11
                        lcl_11 = 15
                        try:
                            _py_local_tk = prim__tokens.array[prim__tokens.offset]
                            if (_py_local_tk.idint is lcl_11):
                                prim__tokens.offset += 1
                            else:
                                _py_local_tk = None
                        except IndexError:
                            _py_local_tk = None
                        lcl_11 = _py_local_tk
                        _slot_3 = lcl_11
                        lcl_11 = (_slot_3 is None)
                        if lcl_11:
                            lcl_12 = prim__tokens.offset
                            lcl_12 = (lcl_12, 'quote ; not match')
                            lcl_12 = prim__cons(lcl_12, prim__nil)
                            lcl_12 = lcl_12
                            lcl_12 = (False, lcl_12)
                            lcl_11 = lcl_12
                        else:
                            lcl_12 = _slot_0
                            lcl_13 = _slot_2
                            lcl_12 = Def(lcl_12, Alias, lcl_13)
                            _slot_local__1 = lcl_12
                            lcl_12 = (True, _slot_local__1)
                            lcl_11 = lcl_12
                        lcl_10 = lcl_11
                    lcl_2 = lcl_10
                elif (lcl_3 == 14):
                    _py_local_i = prim__tokens.offset
                    _py_local_t = prim__tokens.array[_py_local_i]
                    prim__tokens.offset = (_py_local_i + 1)
                    lcl_10 = _py_local_t
                    _slot_1 = lcl_10
                    lcl_10 = parse_alts(prim__state, prim__tokens)
                    _slot_2_check = lcl_10
                    lcl_10 = _slot_2_check[0]
                    lcl_10 = (lcl_10 is False)
                    if lcl_10:
                        lcl_10 = _slot_2_check
                    else:
                        lcl_11 = _slot_2_check[1]
                        lcl_11 = lcl_11
                        _slot_2 = lcl_11
                        lcl_11 = 15
                        try:
                            _py_local_tk = prim__tokens.array[prim__tokens.offset]
                            if (_py_local_tk.idint is lcl_11):
                                prim__tokens.offset += 1
                            else:
                                _py_local_tk = None
                        except IndexError:
                            _py_local_tk = None
                        lcl_11 = _py_local_tk
                        _slot_3 = lcl_11
                        lcl_11 = (_slot_3 is None)
                        if lcl_11:
                            lcl_12 = prim__tokens.offset
                            lcl_12 = (lcl_12, 'quote ; not match')
                            lcl_12 = prim__cons(lcl_12, prim__nil)
                            lcl_12 = lcl_12
                            lcl_12 = (False, lcl_12)
                            lcl_11 = lcl_12
                        else:
                            lcl_12 = _slot_0
                            lcl_13 = _slot_2
                            lcl_12 = Def(lcl_12, Define, lcl_13)
                            _slot_local__1 = lcl_12
                            lcl_12 = (True, _slot_local__1)
                            lcl_11 = lcl_12
                        lcl_10 = lcl_11
                    lcl_2 = lcl_10
                else:
                    lcl_10 = (_off_0, 'prod lookahead failed')
                    lcl_10 = prim__cons(lcl_10, prim__nil)
                    lcl_10 = lcl_10
                    lcl_10 = (False, lcl_10)
                    lcl_2 = lcl_10
                lcl_1 = lcl_2
            else:
                lcl_10 = (_off_0, 'prod got EOF')
                lcl_10 = prim__cons(lcl_10, prim__nil)
                lcl_10 = lcl_10
                lcl_10 = (False, lcl_10)
                lcl_1 = lcl_10
            lcl_0 = lcl_1
        return lcl_0

    def parse_rbnf__list__1(prim__state, prim__tokens):
        lcl_0 = parse_atomExpr(prim__state, prim__tokens)
        _slot_0_check = lcl_0
        lcl_0 = _slot_0_check[0]
        lcl_0 = (lcl_0 is False)
        if lcl_0:
            lcl_0 = _slot_0_check
        else:
            lcl_1 = _slot_0_check[1]
            lcl_1 = lcl_1
            _slot_0 = lcl_1
            lcl_1 = _slot_0
            lcl_1 = [lcl_1]
            _slot_local__1 = lcl_1
            lcl_1 = lr_loop_rbnf__list__1(_slot_local__1, prim__state, prim__tokens)
            lcl_0 = lcl_1
        return lcl_0

    def parse_rbnf__list__7(prim__state, prim__tokens):
        lcl_0 = prim__tokens.offset
        _off_0 = lcl_0
        lcl_0 = (len(prim__tokens.array) > (prim__tokens.offset + 0))
        if lcl_0:
            lcl_2 = prim__tokens.array[(prim__tokens.offset + 0)]
            lcl_2 = lcl_2.idint
            if (lcl_2 == 18):
                lcl_3 = parse_pragma(prim__state, prim__tokens)
                _slot_0_check = lcl_3
                lcl_3 = _slot_0_check[0]
                lcl_3 = (lcl_3 is False)
                if lcl_3:
                    lcl_3 = _slot_0_check
                else:
                    lcl_4 = _slot_0_check[1]
                    lcl_4 = lcl_4
                    _slot_0 = lcl_4
                    lcl_4 = _slot_0
                    lcl_4 = [lcl_4]
                    _slot_local__1 = lcl_4
                    lcl_4 = lr_loop_rbnf__list__7(_slot_local__1, prim__state, prim__tokens)
                    lcl_3 = lcl_4
                lcl_1 = lcl_3
            elif (lcl_2 == 22):
                lcl_3 = prim__tokens.offset
                _off_1 = lcl_3
                lcl_3 = (len(prim__tokens.array) > (prim__tokens.offset + 1))
                if lcl_3:
                    lcl_5 = prim__tokens.array[(prim__tokens.offset + 1)]
                    lcl_5 = lcl_5.idint
                    if (lcl_5 == 7):
                        lcl_6 = parse_prod(prim__state, prim__tokens)
                        _slot_0_check = lcl_6
                        lcl_6 = _slot_0_check[0]
                        lcl_6 = (lcl_6 is False)
                        if lcl_6:
                            lcl_6 = _slot_0_check
                        else:
                            lcl_7 = _slot_0_check[1]
                            lcl_7 = lcl_7
                            _slot_0 = lcl_7
                            lcl_7 = _slot_0
                            lcl_7 = [lcl_7]
                            _slot_local__1 = lcl_7
                            lcl_7 = lr_loop_rbnf__list__7(_slot_local__1, prim__state, prim__tokens)
                            lcl_6 = lcl_7
                        lcl_4 = lcl_6
                    elif (lcl_5 == 16):
                        lcl_6 = parse_prod(prim__state, prim__tokens)
                        _slot_0_check = lcl_6
                        lcl_6 = _slot_0_check[0]
                        lcl_6 = (lcl_6 is False)
                        if lcl_6:
                            lcl_6 = _slot_0_check
                        else:
                            lcl_7 = _slot_0_check[1]
                            lcl_7 = lcl_7
                            _slot_0 = lcl_7
                            lcl_7 = _slot_0
                            lcl_7 = [lcl_7]
                            _slot_local__1 = lcl_7
                            lcl_7 = lr_loop_rbnf__list__7(_slot_local__1, prim__state, prim__tokens)
                            lcl_6 = lcl_7
                        lcl_4 = lcl_6
                    elif (lcl_5 == 14):
                        lcl_6 = parse_prod(prim__state, prim__tokens)
                        _slot_0_check = lcl_6
                        lcl_6 = _slot_0_check[0]
                        lcl_6 = (lcl_6 is False)
                        if lcl_6:
                            lcl_6 = _slot_0_check
                        else:
                            lcl_7 = _slot_0_check[1]
                            lcl_7 = lcl_7
                            _slot_0 = lcl_7
                            lcl_7 = _slot_0
                            lcl_7 = [lcl_7]
                            _slot_local__1 = lcl_7
                            lcl_7 = lr_loop_rbnf__list__7(_slot_local__1, prim__state, prim__tokens)
                            lcl_6 = lcl_7
                        lcl_4 = lcl_6
                    elif (lcl_5 == 24):
                        lcl_6 = parse_pragma(prim__state, prim__tokens)
                        _slot_0_check = lcl_6
                        lcl_6 = _slot_0_check[0]
                        lcl_6 = (lcl_6 is False)
                        if lcl_6:
                            lcl_6 = _slot_0_check
                        else:
                            lcl_7 = _slot_0_check[1]
                            lcl_7 = lcl_7
                            _slot_0 = lcl_7
                            lcl_7 = _slot_0
                            lcl_7 = [lcl_7]
                            _slot_local__1 = lcl_7
                            lcl_7 = lr_loop_rbnf__list__7(_slot_local__1, prim__state, prim__tokens)
                            lcl_6 = lcl_7
                        lcl_4 = lcl_6
                    else:
                        lcl_6 = parse_prod(prim__state, prim__tokens)
                        _slot_0_check = lcl_6
                        lcl_6 = _slot_0_check[0]
                        lcl_6 = (lcl_6 is False)
                        if lcl_6:
                            lcl_6 = _slot_0_check
                        else:
                            lcl_7 = _slot_0_check[1]
                            lcl_7 = lcl_7
                            _slot_0 = lcl_7
                            lcl_7 = _slot_0
                            lcl_7 = [lcl_7]
                            _slot_local__1 = lcl_7
                            lcl_7 = lr_loop_rbnf__list__7(_slot_local__1, prim__state, prim__tokens)
                            lcl_6 = lcl_7
                        lcl_4 = lcl_6
                    lcl_3 = lcl_4
                else:
                    lcl_4 = (_off_1, 'rbnf_list_7 got EOF')
                    lcl_4 = prim__cons(lcl_4, prim__nil)
                    lcl_4 = lcl_4
                    lcl_4 = (False, lcl_4)
                    lcl_3 = lcl_4
                lcl_1 = lcl_3
            elif (lcl_2 == 24):
                lcl_3 = parse_pragma(prim__state, prim__tokens)
                _slot_0_check = lcl_3
                lcl_3 = _slot_0_check[0]
                lcl_3 = (lcl_3 is False)
                if lcl_3:
                    lcl_3 = _slot_0_check
                else:
                    lcl_4 = _slot_0_check[1]
                    lcl_4 = lcl_4
                    _slot_0 = lcl_4
                    lcl_4 = _slot_0
                    lcl_4 = [lcl_4]
                    _slot_local__1 = lcl_4
                    lcl_4 = lr_loop_rbnf__list__7(_slot_local__1, prim__state, prim__tokens)
                    lcl_3 = lcl_4
                lcl_1 = lcl_3
            else:
                lcl_3 = (_off_0, 'rbnf_list_7 lookahead failed')
                lcl_3 = prim__cons(lcl_3, prim__nil)
                lcl_3 = lcl_3
                lcl_3 = (False, lcl_3)
                lcl_1 = lcl_3
            lcl_0 = lcl_1
        else:
            lcl_1 = (_off_0, 'rbnf_list_7 got EOF')
            lcl_1 = prim__cons(lcl_1, prim__nil)
            lcl_1 = lcl_1
            lcl_1 = (False, lcl_1)
            lcl_0 = lcl_1
        return lcl_0

    def parse_rbnf__sep__list__0(prim__state, prim__tokens):
        lcl_0 = parse_expr(prim__state, prim__tokens)
        _slot_0_check = lcl_0
        lcl_0 = _slot_0_check[0]
        lcl_0 = (lcl_0 is False)
        if lcl_0:
            lcl_0 = _slot_0_check
        else:
            lcl_1 = _slot_0_check[1]
            lcl_1 = lcl_1
            _slot_0 = lcl_1
            lcl_1 = _slot_0
            lcl_1 = [lcl_1]
            _slot_local__1 = lcl_1
            lcl_1 = lr_loop_rbnf__sep__list__0(_slot_local__1, prim__state, prim__tokens)
            lcl_0 = lcl_1
        return lcl_0

    def parse_rbnf__sep__list__2(prim__state, prim__tokens):
        lcl_0 = parse_cseq(prim__state, prim__tokens)
        _slot_0_check = lcl_0
        lcl_0 = _slot_0_check[0]
        lcl_0 = (lcl_0 is False)
        if lcl_0:
            lcl_0 = _slot_0_check
        else:
            lcl_1 = _slot_0_check[1]
            lcl_1 = lcl_1
            _slot_0 = lcl_1
            lcl_1 = _slot_0
            lcl_1 = [lcl_1]
            _slot_local__1 = lcl_1
            lcl_1 = lr_loop_rbnf__sep__list__2(_slot_local__1, prim__state, prim__tokens)
            lcl_0 = lcl_1
        return lcl_0

    def parse_rbnf__sep__list__3(prim__state, prim__tokens):
        lcl_0 = parse_rewrite(prim__state, prim__tokens)
        _slot_0_check = lcl_0
        lcl_0 = _slot_0_check[0]
        lcl_0 = (lcl_0 is False)
        if lcl_0:
            lcl_0 = _slot_0_check
        else:
            lcl_1 = _slot_0_check[1]
            lcl_1 = lcl_1
            _slot_0 = lcl_1
            lcl_1 = _slot_0
            lcl_1 = [lcl_1]
            _slot_local__1 = lcl_1
            lcl_1 = lr_loop_rbnf__sep__list__3(_slot_local__1, prim__state, prim__tokens)
            lcl_0 = lcl_1
        return lcl_0

    def parse_rbnf__sep__list__4(prim__state, prim__tokens):
        lcl_0 = parse_Ident(prim__state, prim__tokens)
        _slot_0_check = lcl_0
        lcl_0 = _slot_0_check[0]
        lcl_0 = (lcl_0 is False)
        if lcl_0:
            lcl_0 = _slot_0_check
        else:
            lcl_1 = _slot_0_check[1]
            lcl_1 = lcl_1
            _slot_0 = lcl_1
            lcl_1 = _slot_0
            lcl_1 = [lcl_1]
            _slot_local__1 = lcl_1
            lcl_1 = lr_loop_rbnf__sep__list__4(_slot_local__1, prim__state, prim__tokens)
            lcl_0 = lcl_1
        return lcl_0

    def parse_rbnf__sep__list__5(prim__state, prim__tokens):
        lcl_0 = parse_lang(prim__state, prim__tokens)
        _slot_0_check = lcl_0
        lcl_0 = _slot_0_check[0]
        lcl_0 = (lcl_0 is False)
        if lcl_0:
            lcl_0 = _slot_0_check
        else:
            lcl_1 = _slot_0_check[1]
            lcl_1 = lcl_1
            _slot_0 = lcl_1
            lcl_1 = _slot_0
            lcl_1 = [lcl_1]
            _slot_local__1 = lcl_1
            lcl_1 = lr_loop_rbnf__sep__list__5(_slot_local__1, prim__state, prim__tokens)
            lcl_0 = lcl_1
        return lcl_0

    def parse_rbnf__sep__list__6(prim__state, prim__tokens):
        lcl_0 = parse_filename(prim__state, prim__tokens)
        _slot_0_check = lcl_0
        lcl_0 = _slot_0_check[0]
        lcl_0 = (lcl_0 is False)
        if lcl_0:
            lcl_0 = _slot_0_check
        else:
            lcl_1 = _slot_0_check[1]
            lcl_1 = lcl_1
            _slot_0 = lcl_1
            lcl_1 = _slot_0
            lcl_1 = [lcl_1]
            _slot_local__1 = lcl_1
            lcl_1 = lr_loop_rbnf__sep__list__6(_slot_local__1, prim__state, prim__tokens)
            lcl_0 = lcl_1
        return lcl_0

    def parse_rewrite(prim__state, prim__tokens):
        lcl_0 = parse_seq(prim__state, prim__tokens)
        _slot_0_check = lcl_0
        lcl_0 = _slot_0_check[0]
        lcl_0 = (lcl_0 is False)
        if lcl_0:
            lcl_0 = _slot_0_check
        else:
            lcl_1 = _slot_0_check[1]
            lcl_1 = lcl_1
            _slot_0 = lcl_1
            lcl_1 = prim__tokens.offset
            _off_0 = lcl_1
            lcl_1 = (len(prim__tokens.array) > (prim__tokens.offset + 0))
            if lcl_1:
                lcl_3 = prim__tokens.array[(prim__tokens.offset + 0)]
                lcl_3 = lcl_3.idint
                if (lcl_3 == 12):
                    _py_local_i = prim__tokens.offset
                    _py_local_t = prim__tokens.array[_py_local_i]
                    prim__tokens.offset = (_py_local_i + 1)
                    lcl_4 = _py_local_t
                    _slot_1 = lcl_4
                    lcl_4 = parse_lang(prim__state, prim__tokens)
                    _slot_2_check = lcl_4
                    lcl_4 = _slot_2_check[0]
                    lcl_4 = (lcl_4 is False)
                    if lcl_4:
                        lcl_4 = _slot_2_check
                    else:
                        lcl_5 = _slot_2_check[1]
                        lcl_5 = lcl_5
                        _slot_2 = lcl_5
                        lcl_5 = 13
                        try:
                            _py_local_tk = prim__tokens.array[prim__tokens.offset]
                            if (_py_local_tk.idint is lcl_5):
                                prim__tokens.offset += 1
                            else:
                                _py_local_tk = None
                        except IndexError:
                            _py_local_tk = None
                        lcl_5 = _py_local_tk
                        _slot_3 = lcl_5
                        lcl_5 = (_slot_3 is None)
                        if lcl_5:
                            lcl_6 = prim__tokens.offset
                            lcl_6 = (lcl_6, 'quote } not match')
                            lcl_6 = prim__cons(lcl_6, prim__nil)
                            lcl_6 = lcl_6
                            lcl_6 = (False, lcl_6)
                            lcl_5 = lcl_6
                        else:
                            lcl_6 = _slot_0
                            lcl_6 = seq(lcl_6)
                            lcl_7 = _slot_2
                            lcl_6 = Rewrite(lcl_6, lcl_7)
                            _slot_local__1 = lcl_6
                            lcl_6 = (True, _slot_local__1)
                            lcl_5 = lcl_6
                        lcl_4 = lcl_5
                    lcl_2 = lcl_4
                else:
                    lcl_4 = _slot_0
                    lcl_4 = seq(lcl_4)
                    lcl_4 = Rewrite(lcl_4, None)
                    _slot_local__1 = lcl_4
                    lcl_4 = (True, _slot_local__1)
                    lcl_2 = lcl_4
                lcl_1 = lcl_2
            else:
                lcl_2 = (_off_0, 'rewrite got EOF')
                lcl_2 = prim__cons(lcl_2, prim__nil)
                lcl_2 = lcl_2
                lcl_2 = (False, lcl_2)
                lcl_1 = lcl_2
            lcl_0 = lcl_1
        return lcl_0

    def parse_seq(prim__state, prim__tokens):
        lcl_0 = parse_rbnf__list__1(prim__state, prim__tokens)
        _slot_0_check = lcl_0
        lcl_0 = _slot_0_check[0]
        lcl_0 = (lcl_0 is False)
        if lcl_0:
            lcl_0 = _slot_0_check
        else:
            lcl_1 = _slot_0_check[1]
            lcl_1 = lcl_1
            _slot_0 = lcl_1
            lcl_1 = _slot_0
            _slot_local__1 = lcl_1
            lcl_1 = (True, _slot_local__1)
            lcl_0 = lcl_1
        return lcl_0
    return parse_START
