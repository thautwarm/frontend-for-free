expr_lst : separated_list(',', expr) { $0 };

Ident : <Ident> { *$0 };

atom : <QuotedStr>          { Terminal(LITERAL, unesc(*$0)) }
     | '<' Ident '>'        { Terminal(SYMBOL, 1) }
     | Ident                { NonTerminal($0) }
     | '(' expr ')'         { $1 }
     | '[' expr ']'         { Optional($1) }
     | Ident ':' '(' expr_lst ')'  { MacroUse($0, $3) }
     | Ident '=' atom       { Bind($0, $2) }
     ;


seq : list(atom) { $0 };
cseq : seq { seq($0) };
expr : separated_list('|', cseq) { alt($0) };


rewrite : seq               { Rewrite(seq($0), None) }
        | seq '{' lang '}'  { Rewrite(seq($0), $2) }
        ;

alts : separated_list('|', rewrite) { $0 };


IdentList : separated_list(',', Ident) { $0 };

prod : Ident ':=' alts ';'                       { Def($0, Define, $2) }
     | Ident ':' '(' IdentList ')' ':=' alts ';' { MacroDef($0, $3, Define, $6)}
     | Ident ':' '(' ')' ':=' alts ';'           { MacroDef($0, [], Define, $5)}
     
     | Ident '<=>' expr ';'                       { Def($0, Alias, $2) }
     | Ident ':' '(' IdentList ')' '<=>' alts ';' { MacroDef($0, $3, Alias, $6)}
     | Ident ':' '(' ')' '<=>' alts ';'           { MacroDef($0, [], Alias, $5)}
     ;

lang_lst : separated_list(',', lang) { $0 };

lang : lang_atom                     { $0 }
     | lang '(' lang_lst ')'         { Call($0, $2) }
     | lang '(' ')'                  { Call($0, []) }
     ;

lang_atom :
       Ident                 { Var($0) }
     | <Int>                 { Int(int(*$0)) }
     | '(' ')'               { Tuple([]) }
     | '[' ']'               { List([]) }
     | '(' lang_lst ')'      { maybeTuple($1) }
     | '(' lang_lst ',' ')'  { Tuple($1) }
     | '[' lang_lst ']'      { List($1) }
     | '$' <Int>             { Slot(int(*$1)) }
     ;

START : <BOF> list(prod) <EOF> { $1 };
