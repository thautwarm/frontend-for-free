python %%inline
from json.decoder import py_scanstring
def S(tk):
    return tk.value

def unesc(x, f=py_scanstring):
    """from the raw form of a double quoted string to a python string,
    e.g.,
        unesc('"asd"') == "asd"
    """
    return f(x, 1)[0]

def append(x, a, f=list.append):
    f(x, a)
    return x
%%

START : value { $1 };

separated_list[comma, p] :
      p { [$1] }
    | separated_list[comma, p] comma p
      { $1.append($3); $1 }
    ;

value: <ESCAPED_STRING> { unesc(S($1)) }
     | <SIGNED_INT>     { int(S($1)) }
     | <SIGNED_FLOAT>   { float(S($1)) }
     | "true" { True }
     | "null" { None }
     | "false" { False }
     # array
     | '[' ']' { [] }
     | '[' separated_list[',', value] ']' { $2 }
     # object
     | '{' '}' { dict() }
     | '{' separated_list[',', pair] '}' { dict($2) }
     ;

pair : <ESCAPED_STRING> ":" value { (unesc(S($1)), $3) };

__unused: <BOF> <EOF>;